// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: chf.capnp

#ifndef CAPNP_INCLUDED_c75f49ee0059f55d_
#define CAPNP_INCLUDED_c75f49ee0059f55d_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ed5d37861203d027);
CAPNP_DECLARE_SCHEMA(fba056008585e9fd);
CAPNP_DECLARE_SCHEMA(a7ab5c68e4bc7b62);
CAPNP_DECLARE_SCHEMA(b158a6a28e2d29c2);

}  // namespace schemas
}  // namespace capnp

namespace kentik {
namespace chf {

struct Custom {
  Custom() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Value;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ed5d37861203d027, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Custom::Value {
  Value() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UINT32_VAL,
    FLOAT32_VAL,
    STR_VAL,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fba056008585e9fd, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct CHF {
  CHF() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a7ab5c68e4bc7b62, 28, 14)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct PackedCHF {
  PackedCHF() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b158a6a28e2d29c2, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Custom::Reader {
public:
  typedef Custom Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId() const;

  inline Value::Reader getValue() const;

  inline bool getIsDimension() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Custom::Builder {
public:
  typedef Custom Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId();
  inline void setId( ::uint32_t value);

  inline Value::Builder getValue();
  inline Value::Builder initValue();

  inline bool getIsDimension();
  inline void setIsDimension(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Custom::Pipeline {
public:
  typedef Custom Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline Value::Pipeline getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Custom::Value::Reader {
public:
  typedef Value Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUint32Val() const;
  inline  ::uint32_t getUint32Val() const;

  inline bool isFloat32Val() const;
  inline float getFloat32Val() const;

  inline bool isStrVal() const;
  inline bool hasStrVal() const;
  inline  ::capnp::Text::Reader getStrVal() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Custom::Value::Builder {
public:
  typedef Value Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUint32Val();
  inline  ::uint32_t getUint32Val();
  inline void setUint32Val( ::uint32_t value);

  inline bool isFloat32Val();
  inline float getFloat32Val();
  inline void setFloat32Val(float value);

  inline bool isStrVal();
  inline bool hasStrVal();
  inline  ::capnp::Text::Builder getStrVal();
  inline void setStrVal( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStrVal(unsigned int size);
  inline void adoptStrVal(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStrVal();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Custom::Value::Pipeline {
public:
  typedef Value Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CHF::Reader {
public:
  typedef CHF Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestampNano() const;

  inline  ::uint32_t getDstAs() const;

  inline  ::uint32_t getDstGeo() const;

  inline  ::uint32_t getDstMac() const;

  inline  ::uint32_t getHeaderLen() const;

  inline  ::uint64_t getInBytes() const;

  inline  ::uint64_t getInPkts() const;

  inline  ::uint32_t getInputPort() const;

  inline  ::uint32_t getIpSize() const;

  inline  ::uint32_t getIpv4DstAddr() const;

  inline  ::uint32_t getIpv4SrcAddr() const;

  inline  ::uint32_t getL4DstPort() const;

  inline  ::uint32_t getL4SrcPort() const;

  inline  ::uint32_t getOutputPort() const;

  inline  ::uint32_t getProtocol() const;

  inline  ::uint32_t getSampledPacketSize() const;

  inline  ::uint32_t getSrcAs() const;

  inline  ::uint32_t getSrcGeo() const;

  inline  ::uint32_t getSrcMac() const;

  inline  ::uint32_t getTcpFlags() const;

  inline  ::uint32_t getTos() const;

  inline  ::uint32_t getVlanIn() const;

  inline  ::uint32_t getVlanOut() const;

  inline  ::uint32_t getIpv4NextHop() const;

  inline  ::uint32_t getMplsType() const;

  inline  ::uint64_t getOutBytes() const;

  inline  ::uint64_t getOutPkts() const;

  inline  ::uint32_t getTcpRetransmit() const;

  inline bool hasSrcFlowTags() const;
  inline  ::capnp::Text::Reader getSrcFlowTags() const;

  inline bool hasDstFlowTags() const;
  inline  ::capnp::Text::Reader getDstFlowTags() const;

  inline  ::uint32_t getSampleRate() const;

  inline  ::uint32_t getDeviceId() const;

  inline bool hasFlowTags() const;
  inline  ::capnp::Text::Reader getFlowTags() const;

  inline  ::int64_t getTimestamp() const;

  inline bool hasDstBgpAsPath() const;
  inline  ::capnp::Text::Reader getDstBgpAsPath() const;

  inline bool hasDstBgpCommunity() const;
  inline  ::capnp::Text::Reader getDstBgpCommunity() const;

  inline bool hasSrcBgpAsPath() const;
  inline  ::capnp::Text::Reader getSrcBgpAsPath() const;

  inline bool hasSrcBgpCommunity() const;
  inline  ::capnp::Text::Reader getSrcBgpCommunity() const;

  inline  ::uint32_t getSrcNextHopAs() const;

  inline  ::uint32_t getDstNextHopAs() const;

  inline  ::uint32_t getSrcGeoRegion() const;

  inline  ::uint32_t getDstGeoRegion() const;

  inline  ::uint32_t getSrcGeoCity() const;

  inline  ::uint32_t getDstGeoCity() const;

  inline bool getBig() const;

  inline bool getSampleAdj() const;

  inline  ::uint32_t getIpv4DstNextHop() const;

  inline  ::uint32_t getIpv4SrcNextHop() const;

  inline  ::uint32_t getSrcRoutePrefix() const;

  inline  ::uint32_t getDstRoutePrefix() const;

  inline  ::uint8_t getSrcRouteLength() const;

  inline  ::uint8_t getDstRouteLength() const;

  inline  ::uint32_t getSrcSecondAsn() const;

  inline  ::uint32_t getDstSecondAsn() const;

  inline  ::uint32_t getSrcThirdAsn() const;

  inline  ::uint32_t getDstThirdAsn() const;

  inline bool hasIpv6DstAddr() const;
  inline  ::capnp::Data::Reader getIpv6DstAddr() const;

  inline bool hasIpv6SrcAddr() const;
  inline  ::capnp::Data::Reader getIpv6SrcAddr() const;

  inline  ::uint64_t getSrcEthMac() const;

  inline  ::uint64_t getDstEthMac() const;

  inline bool hasCustom() const;
  inline  ::capnp::List< ::kentik::chf::Custom>::Reader getCustom() const;

  inline bool hasIpv6SrcNextHop() const;
  inline  ::capnp::Data::Reader getIpv6SrcNextHop() const;

  inline bool hasIpv6DstNextHop() const;
  inline  ::capnp::Data::Reader getIpv6DstNextHop() const;

  inline bool hasIpv6SrcRoutePrefix() const;
  inline  ::capnp::Data::Reader getIpv6SrcRoutePrefix() const;

  inline bool hasIpv6DstRoutePrefix() const;
  inline  ::capnp::Data::Reader getIpv6DstRoutePrefix() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CHF::Builder {
public:
  typedef CHF Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestampNano();
  inline void setTimestampNano( ::int64_t value);

  inline  ::uint32_t getDstAs();
  inline void setDstAs( ::uint32_t value);

  inline  ::uint32_t getDstGeo();
  inline void setDstGeo( ::uint32_t value);

  inline  ::uint32_t getDstMac();
  inline void setDstMac( ::uint32_t value);

  inline  ::uint32_t getHeaderLen();
  inline void setHeaderLen( ::uint32_t value);

  inline  ::uint64_t getInBytes();
  inline void setInBytes( ::uint64_t value);

  inline  ::uint64_t getInPkts();
  inline void setInPkts( ::uint64_t value);

  inline  ::uint32_t getInputPort();
  inline void setInputPort( ::uint32_t value);

  inline  ::uint32_t getIpSize();
  inline void setIpSize( ::uint32_t value);

  inline  ::uint32_t getIpv4DstAddr();
  inline void setIpv4DstAddr( ::uint32_t value);

  inline  ::uint32_t getIpv4SrcAddr();
  inline void setIpv4SrcAddr( ::uint32_t value);

  inline  ::uint32_t getL4DstPort();
  inline void setL4DstPort( ::uint32_t value);

  inline  ::uint32_t getL4SrcPort();
  inline void setL4SrcPort( ::uint32_t value);

  inline  ::uint32_t getOutputPort();
  inline void setOutputPort( ::uint32_t value);

  inline  ::uint32_t getProtocol();
  inline void setProtocol( ::uint32_t value);

  inline  ::uint32_t getSampledPacketSize();
  inline void setSampledPacketSize( ::uint32_t value);

  inline  ::uint32_t getSrcAs();
  inline void setSrcAs( ::uint32_t value);

  inline  ::uint32_t getSrcGeo();
  inline void setSrcGeo( ::uint32_t value);

  inline  ::uint32_t getSrcMac();
  inline void setSrcMac( ::uint32_t value);

  inline  ::uint32_t getTcpFlags();
  inline void setTcpFlags( ::uint32_t value);

  inline  ::uint32_t getTos();
  inline void setTos( ::uint32_t value);

  inline  ::uint32_t getVlanIn();
  inline void setVlanIn( ::uint32_t value);

  inline  ::uint32_t getVlanOut();
  inline void setVlanOut( ::uint32_t value);

  inline  ::uint32_t getIpv4NextHop();
  inline void setIpv4NextHop( ::uint32_t value);

  inline  ::uint32_t getMplsType();
  inline void setMplsType( ::uint32_t value);

  inline  ::uint64_t getOutBytes();
  inline void setOutBytes( ::uint64_t value);

  inline  ::uint64_t getOutPkts();
  inline void setOutPkts( ::uint64_t value);

  inline  ::uint32_t getTcpRetransmit();
  inline void setTcpRetransmit( ::uint32_t value);

  inline bool hasSrcFlowTags();
  inline  ::capnp::Text::Builder getSrcFlowTags();
  inline void setSrcFlowTags( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSrcFlowTags(unsigned int size);
  inline void adoptSrcFlowTags(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSrcFlowTags();

  inline bool hasDstFlowTags();
  inline  ::capnp::Text::Builder getDstFlowTags();
  inline void setDstFlowTags( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDstFlowTags(unsigned int size);
  inline void adoptDstFlowTags(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDstFlowTags();

  inline  ::uint32_t getSampleRate();
  inline void setSampleRate( ::uint32_t value);

  inline  ::uint32_t getDeviceId();
  inline void setDeviceId( ::uint32_t value);

  inline bool hasFlowTags();
  inline  ::capnp::Text::Builder getFlowTags();
  inline void setFlowTags( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFlowTags(unsigned int size);
  inline void adoptFlowTags(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFlowTags();

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline bool hasDstBgpAsPath();
  inline  ::capnp::Text::Builder getDstBgpAsPath();
  inline void setDstBgpAsPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDstBgpAsPath(unsigned int size);
  inline void adoptDstBgpAsPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDstBgpAsPath();

  inline bool hasDstBgpCommunity();
  inline  ::capnp::Text::Builder getDstBgpCommunity();
  inline void setDstBgpCommunity( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDstBgpCommunity(unsigned int size);
  inline void adoptDstBgpCommunity(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDstBgpCommunity();

  inline bool hasSrcBgpAsPath();
  inline  ::capnp::Text::Builder getSrcBgpAsPath();
  inline void setSrcBgpAsPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSrcBgpAsPath(unsigned int size);
  inline void adoptSrcBgpAsPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSrcBgpAsPath();

  inline bool hasSrcBgpCommunity();
  inline  ::capnp::Text::Builder getSrcBgpCommunity();
  inline void setSrcBgpCommunity( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSrcBgpCommunity(unsigned int size);
  inline void adoptSrcBgpCommunity(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSrcBgpCommunity();

  inline  ::uint32_t getSrcNextHopAs();
  inline void setSrcNextHopAs( ::uint32_t value);

  inline  ::uint32_t getDstNextHopAs();
  inline void setDstNextHopAs( ::uint32_t value);

  inline  ::uint32_t getSrcGeoRegion();
  inline void setSrcGeoRegion( ::uint32_t value);

  inline  ::uint32_t getDstGeoRegion();
  inline void setDstGeoRegion( ::uint32_t value);

  inline  ::uint32_t getSrcGeoCity();
  inline void setSrcGeoCity( ::uint32_t value);

  inline  ::uint32_t getDstGeoCity();
  inline void setDstGeoCity( ::uint32_t value);

  inline bool getBig();
  inline void setBig(bool value);

  inline bool getSampleAdj();
  inline void setSampleAdj(bool value);

  inline  ::uint32_t getIpv4DstNextHop();
  inline void setIpv4DstNextHop( ::uint32_t value);

  inline  ::uint32_t getIpv4SrcNextHop();
  inline void setIpv4SrcNextHop( ::uint32_t value);

  inline  ::uint32_t getSrcRoutePrefix();
  inline void setSrcRoutePrefix( ::uint32_t value);

  inline  ::uint32_t getDstRoutePrefix();
  inline void setDstRoutePrefix( ::uint32_t value);

  inline  ::uint8_t getSrcRouteLength();
  inline void setSrcRouteLength( ::uint8_t value);

  inline  ::uint8_t getDstRouteLength();
  inline void setDstRouteLength( ::uint8_t value);

  inline  ::uint32_t getSrcSecondAsn();
  inline void setSrcSecondAsn( ::uint32_t value);

  inline  ::uint32_t getDstSecondAsn();
  inline void setDstSecondAsn( ::uint32_t value);

  inline  ::uint32_t getSrcThirdAsn();
  inline void setSrcThirdAsn( ::uint32_t value);

  inline  ::uint32_t getDstThirdAsn();
  inline void setDstThirdAsn( ::uint32_t value);

  inline bool hasIpv6DstAddr();
  inline  ::capnp::Data::Builder getIpv6DstAddr();
  inline void setIpv6DstAddr( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initIpv6DstAddr(unsigned int size);
  inline void adoptIpv6DstAddr(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownIpv6DstAddr();

  inline bool hasIpv6SrcAddr();
  inline  ::capnp::Data::Builder getIpv6SrcAddr();
  inline void setIpv6SrcAddr( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initIpv6SrcAddr(unsigned int size);
  inline void adoptIpv6SrcAddr(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownIpv6SrcAddr();

  inline  ::uint64_t getSrcEthMac();
  inline void setSrcEthMac( ::uint64_t value);

  inline  ::uint64_t getDstEthMac();
  inline void setDstEthMac( ::uint64_t value);

  inline bool hasCustom();
  inline  ::capnp::List< ::kentik::chf::Custom>::Builder getCustom();
  inline void setCustom( ::capnp::List< ::kentik::chf::Custom>::Reader value);
  inline  ::capnp::List< ::kentik::chf::Custom>::Builder initCustom(unsigned int size);
  inline void adoptCustom(::capnp::Orphan< ::capnp::List< ::kentik::chf::Custom>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::kentik::chf::Custom>> disownCustom();

  inline bool hasIpv6SrcNextHop();
  inline  ::capnp::Data::Builder getIpv6SrcNextHop();
  inline void setIpv6SrcNextHop( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initIpv6SrcNextHop(unsigned int size);
  inline void adoptIpv6SrcNextHop(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownIpv6SrcNextHop();

  inline bool hasIpv6DstNextHop();
  inline  ::capnp::Data::Builder getIpv6DstNextHop();
  inline void setIpv6DstNextHop( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initIpv6DstNextHop(unsigned int size);
  inline void adoptIpv6DstNextHop(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownIpv6DstNextHop();

  inline bool hasIpv6SrcRoutePrefix();
  inline  ::capnp::Data::Builder getIpv6SrcRoutePrefix();
  inline void setIpv6SrcRoutePrefix( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initIpv6SrcRoutePrefix(unsigned int size);
  inline void adoptIpv6SrcRoutePrefix(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownIpv6SrcRoutePrefix();

  inline bool hasIpv6DstRoutePrefix();
  inline  ::capnp::Data::Builder getIpv6DstRoutePrefix();
  inline void setIpv6DstRoutePrefix( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initIpv6DstRoutePrefix(unsigned int size);
  inline void adoptIpv6DstRoutePrefix(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownIpv6DstRoutePrefix();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CHF::Pipeline {
public:
  typedef CHF Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PackedCHF::Reader {
public:
  typedef PackedCHF Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMsgs() const;
  inline  ::capnp::List< ::kentik::chf::CHF>::Reader getMsgs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PackedCHF::Builder {
public:
  typedef PackedCHF Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMsgs();
  inline  ::capnp::List< ::kentik::chf::CHF>::Builder getMsgs();
  inline void setMsgs( ::capnp::List< ::kentik::chf::CHF>::Reader value);
  inline  ::capnp::List< ::kentik::chf::CHF>::Builder initMsgs(unsigned int size);
  inline void adoptMsgs(::capnp::Orphan< ::capnp::List< ::kentik::chf::CHF>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::kentik::chf::CHF>> disownMsgs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PackedCHF::Pipeline {
public:
  typedef PackedCHF Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t Custom::Reader::getId() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Custom::Builder::getId() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Custom::Builder::setId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline Custom::Value::Reader Custom::Reader::getValue() const {
  return Custom::Value::Reader(_reader);
}
inline Custom::Value::Builder Custom::Builder::getValue() {
  return Custom::Value::Builder(_builder);
}
#if !CAPNP_LITE
inline Custom::Value::Pipeline Custom::Pipeline::getValue() {
  return Custom::Value::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline Custom::Value::Builder Custom::Builder::initValue() {
  _builder.setDataField< ::uint32_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(4 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return Custom::Value::Builder(_builder);
}
inline bool Custom::Reader::getIsDimension() const {
  return _reader.getDataField<bool>(
      80 * ::capnp::ELEMENTS);
}

inline bool Custom::Builder::getIsDimension() {
  return _builder.getDataField<bool>(
      80 * ::capnp::ELEMENTS);
}
inline void Custom::Builder::setIsDimension(bool value) {
  _builder.setDataField<bool>(
      80 * ::capnp::ELEMENTS, value);
}

inline  ::kentik::chf::Custom::Value::Which Custom::Value::Reader::which() const {
  return _reader.getDataField<Which>(4 * ::capnp::ELEMENTS);
}
inline  ::kentik::chf::Custom::Value::Which Custom::Value::Builder::which() {
  return _builder.getDataField<Which>(4 * ::capnp::ELEMENTS);
}

inline bool Custom::Value::Reader::isUint32Val() const {
  return which() == Custom::Value::UINT32_VAL;
}
inline bool Custom::Value::Builder::isUint32Val() {
  return which() == Custom::Value::UINT32_VAL;
}
inline  ::uint32_t Custom::Value::Reader::getUint32Val() const {
  KJ_IREQUIRE(which() == Custom::Value::UINT32_VAL,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Custom::Value::Builder::getUint32Val() {
  KJ_IREQUIRE(which() == Custom::Value::UINT32_VAL,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Custom::Value::Builder::setUint32Val( ::uint32_t value) {
  _builder.setDataField<Custom::Value::Which>(
      4 * ::capnp::ELEMENTS, Custom::Value::UINT32_VAL);
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Custom::Value::Reader::isFloat32Val() const {
  return which() == Custom::Value::FLOAT32_VAL;
}
inline bool Custom::Value::Builder::isFloat32Val() {
  return which() == Custom::Value::FLOAT32_VAL;
}
inline float Custom::Value::Reader::getFloat32Val() const {
  KJ_IREQUIRE(which() == Custom::Value::FLOAT32_VAL,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float Custom::Value::Builder::getFloat32Val() {
  KJ_IREQUIRE(which() == Custom::Value::FLOAT32_VAL,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void Custom::Value::Builder::setFloat32Val(float value) {
  _builder.setDataField<Custom::Value::Which>(
      4 * ::capnp::ELEMENTS, Custom::Value::FLOAT32_VAL);
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Custom::Value::Reader::isStrVal() const {
  return which() == Custom::Value::STR_VAL;
}
inline bool Custom::Value::Builder::isStrVal() {
  return which() == Custom::Value::STR_VAL;
}
inline bool Custom::Value::Reader::hasStrVal() const {
  if (which() != Custom::Value::STR_VAL) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Custom::Value::Builder::hasStrVal() {
  if (which() != Custom::Value::STR_VAL) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Custom::Value::Reader::getStrVal() const {
  KJ_IREQUIRE(which() == Custom::Value::STR_VAL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Custom::Value::Builder::getStrVal() {
  KJ_IREQUIRE(which() == Custom::Value::STR_VAL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Custom::Value::Builder::setStrVal( ::capnp::Text::Reader value) {
  _builder.setDataField<Custom::Value::Which>(
      4 * ::capnp::ELEMENTS, Custom::Value::STR_VAL);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Custom::Value::Builder::initStrVal(unsigned int size) {
  _builder.setDataField<Custom::Value::Which>(
      4 * ::capnp::ELEMENTS, Custom::Value::STR_VAL);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Custom::Value::Builder::adoptStrVal(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Custom::Value::Which>(
      4 * ::capnp::ELEMENTS, Custom::Value::STR_VAL);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Custom::Value::Builder::disownStrVal() {
  KJ_IREQUIRE(which() == Custom::Value::STR_VAL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int64_t CHF::Reader::getTimestampNano() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t CHF::Builder::getTimestampNano() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setTimestampNano( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getDstAs() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getDstAs() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setDstAs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getDstGeo() const {
  return _reader.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getDstGeo() {
  return _builder.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setDstGeo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getDstMac() const {
  return _reader.getDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getDstMac() {
  return _builder.getDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setDstMac( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getHeaderLen() const {
  return _reader.getDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getHeaderLen() {
  return _builder.getDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setHeaderLen( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CHF::Reader::getInBytes() const {
  return _reader.getDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint64_t CHF::Builder::getInBytes() {
  return _builder.getDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setInBytes( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CHF::Reader::getInPkts() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t CHF::Builder::getInPkts() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setInPkts( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getInputPort() const {
  return _reader.getDataField< ::uint32_t>(
      10 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getInputPort() {
  return _builder.getDataField< ::uint32_t>(
      10 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setInputPort( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      10 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getIpSize() const {
  return _reader.getDataField< ::uint32_t>(
      11 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getIpSize() {
  return _builder.getDataField< ::uint32_t>(
      11 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setIpSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      11 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getIpv4DstAddr() const {
  return _reader.getDataField< ::uint32_t>(
      12 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getIpv4DstAddr() {
  return _builder.getDataField< ::uint32_t>(
      12 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setIpv4DstAddr( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      12 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getIpv4SrcAddr() const {
  return _reader.getDataField< ::uint32_t>(
      13 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getIpv4SrcAddr() {
  return _builder.getDataField< ::uint32_t>(
      13 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setIpv4SrcAddr( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      13 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getL4DstPort() const {
  return _reader.getDataField< ::uint32_t>(
      14 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getL4DstPort() {
  return _builder.getDataField< ::uint32_t>(
      14 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setL4DstPort( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      14 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getL4SrcPort() const {
  return _reader.getDataField< ::uint32_t>(
      15 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getL4SrcPort() {
  return _builder.getDataField< ::uint32_t>(
      15 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setL4SrcPort( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      15 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getOutputPort() const {
  return _reader.getDataField< ::uint32_t>(
      16 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getOutputPort() {
  return _builder.getDataField< ::uint32_t>(
      16 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setOutputPort( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      16 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getProtocol() const {
  return _reader.getDataField< ::uint32_t>(
      17 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getProtocol() {
  return _builder.getDataField< ::uint32_t>(
      17 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setProtocol( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      17 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getSampledPacketSize() const {
  return _reader.getDataField< ::uint32_t>(
      18 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getSampledPacketSize() {
  return _builder.getDataField< ::uint32_t>(
      18 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setSampledPacketSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      18 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getSrcAs() const {
  return _reader.getDataField< ::uint32_t>(
      19 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getSrcAs() {
  return _builder.getDataField< ::uint32_t>(
      19 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setSrcAs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      19 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getSrcGeo() const {
  return _reader.getDataField< ::uint32_t>(
      20 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getSrcGeo() {
  return _builder.getDataField< ::uint32_t>(
      20 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setSrcGeo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      20 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getSrcMac() const {
  return _reader.getDataField< ::uint32_t>(
      21 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getSrcMac() {
  return _builder.getDataField< ::uint32_t>(
      21 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setSrcMac( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      21 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getTcpFlags() const {
  return _reader.getDataField< ::uint32_t>(
      22 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getTcpFlags() {
  return _builder.getDataField< ::uint32_t>(
      22 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setTcpFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      22 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getTos() const {
  return _reader.getDataField< ::uint32_t>(
      23 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getTos() {
  return _builder.getDataField< ::uint32_t>(
      23 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setTos( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      23 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getVlanIn() const {
  return _reader.getDataField< ::uint32_t>(
      24 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getVlanIn() {
  return _builder.getDataField< ::uint32_t>(
      24 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setVlanIn( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      24 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getVlanOut() const {
  return _reader.getDataField< ::uint32_t>(
      25 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getVlanOut() {
  return _builder.getDataField< ::uint32_t>(
      25 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setVlanOut( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      25 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getIpv4NextHop() const {
  return _reader.getDataField< ::uint32_t>(
      26 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getIpv4NextHop() {
  return _builder.getDataField< ::uint32_t>(
      26 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setIpv4NextHop( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      26 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getMplsType() const {
  return _reader.getDataField< ::uint32_t>(
      27 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getMplsType() {
  return _builder.getDataField< ::uint32_t>(
      27 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setMplsType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      27 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CHF::Reader::getOutBytes() const {
  return _reader.getDataField< ::uint64_t>(
      14 * ::capnp::ELEMENTS);
}

inline  ::uint64_t CHF::Builder::getOutBytes() {
  return _builder.getDataField< ::uint64_t>(
      14 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setOutBytes( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      14 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CHF::Reader::getOutPkts() const {
  return _reader.getDataField< ::uint64_t>(
      15 * ::capnp::ELEMENTS);
}

inline  ::uint64_t CHF::Builder::getOutPkts() {
  return _builder.getDataField< ::uint64_t>(
      15 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setOutPkts( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      15 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getTcpRetransmit() const {
  return _reader.getDataField< ::uint32_t>(
      32 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getTcpRetransmit() {
  return _builder.getDataField< ::uint32_t>(
      32 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setTcpRetransmit( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      32 * ::capnp::ELEMENTS, value);
}

inline bool CHF::Reader::hasSrcFlowTags() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool CHF::Builder::hasSrcFlowTags() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CHF::Reader::getSrcFlowTags() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CHF::Builder::getSrcFlowTags() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void CHF::Builder::setSrcFlowTags( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CHF::Builder::initSrcFlowTags(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void CHF::Builder::adoptSrcFlowTags(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CHF::Builder::disownSrcFlowTags() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool CHF::Reader::hasDstFlowTags() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool CHF::Builder::hasDstFlowTags() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CHF::Reader::getDstFlowTags() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CHF::Builder::getDstFlowTags() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void CHF::Builder::setDstFlowTags( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CHF::Builder::initDstFlowTags(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void CHF::Builder::adoptDstFlowTags(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CHF::Builder::disownDstFlowTags() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint32_t CHF::Reader::getSampleRate() const {
  return _reader.getDataField< ::uint32_t>(
      33 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getSampleRate() {
  return _builder.getDataField< ::uint32_t>(
      33 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setSampleRate( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      33 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getDeviceId() const {
  return _reader.getDataField< ::uint32_t>(
      34 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getDeviceId() {
  return _builder.getDataField< ::uint32_t>(
      34 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setDeviceId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      34 * ::capnp::ELEMENTS, value);
}

inline bool CHF::Reader::hasFlowTags() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool CHF::Builder::hasFlowTags() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CHF::Reader::getFlowTags() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CHF::Builder::getFlowTags() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void CHF::Builder::setFlowTags( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CHF::Builder::initFlowTags(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void CHF::Builder::adoptFlowTags(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CHF::Builder::disownFlowTags() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::int64_t CHF::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      18 * ::capnp::ELEMENTS);
}

inline  ::int64_t CHF::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      18 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      18 * ::capnp::ELEMENTS, value);
}

inline bool CHF::Reader::hasDstBgpAsPath() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool CHF::Builder::hasDstBgpAsPath() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CHF::Reader::getDstBgpAsPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CHF::Builder::getDstBgpAsPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void CHF::Builder::setDstBgpAsPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CHF::Builder::initDstBgpAsPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void CHF::Builder::adoptDstBgpAsPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CHF::Builder::disownDstBgpAsPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool CHF::Reader::hasDstBgpCommunity() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool CHF::Builder::hasDstBgpCommunity() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CHF::Reader::getDstBgpCommunity() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CHF::Builder::getDstBgpCommunity() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void CHF::Builder::setDstBgpCommunity( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CHF::Builder::initDstBgpCommunity(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void CHF::Builder::adoptDstBgpCommunity(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CHF::Builder::disownDstBgpCommunity() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool CHF::Reader::hasSrcBgpAsPath() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool CHF::Builder::hasSrcBgpAsPath() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CHF::Reader::getSrcBgpAsPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CHF::Builder::getSrcBgpAsPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void CHF::Builder::setSrcBgpAsPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CHF::Builder::initSrcBgpAsPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void CHF::Builder::adoptSrcBgpAsPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CHF::Builder::disownSrcBgpAsPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool CHF::Reader::hasSrcBgpCommunity() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool CHF::Builder::hasSrcBgpCommunity() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CHF::Reader::getSrcBgpCommunity() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CHF::Builder::getSrcBgpCommunity() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void CHF::Builder::setSrcBgpCommunity( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CHF::Builder::initSrcBgpCommunity(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void CHF::Builder::adoptSrcBgpCommunity(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CHF::Builder::disownSrcBgpCommunity() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline  ::uint32_t CHF::Reader::getSrcNextHopAs() const {
  return _reader.getDataField< ::uint32_t>(
      35 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getSrcNextHopAs() {
  return _builder.getDataField< ::uint32_t>(
      35 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setSrcNextHopAs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      35 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getDstNextHopAs() const {
  return _reader.getDataField< ::uint32_t>(
      38 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getDstNextHopAs() {
  return _builder.getDataField< ::uint32_t>(
      38 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setDstNextHopAs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      38 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getSrcGeoRegion() const {
  return _reader.getDataField< ::uint32_t>(
      39 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getSrcGeoRegion() {
  return _builder.getDataField< ::uint32_t>(
      39 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setSrcGeoRegion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      39 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getDstGeoRegion() const {
  return _reader.getDataField< ::uint32_t>(
      40 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getDstGeoRegion() {
  return _builder.getDataField< ::uint32_t>(
      40 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setDstGeoRegion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      40 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getSrcGeoCity() const {
  return _reader.getDataField< ::uint32_t>(
      41 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getSrcGeoCity() {
  return _builder.getDataField< ::uint32_t>(
      41 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setSrcGeoCity( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      41 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getDstGeoCity() const {
  return _reader.getDataField< ::uint32_t>(
      42 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getDstGeoCity() {
  return _builder.getDataField< ::uint32_t>(
      42 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setDstGeoCity( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      42 * ::capnp::ELEMENTS, value);
}

inline bool CHF::Reader::getBig() const {
  return _reader.getDataField<bool>(
      1376 * ::capnp::ELEMENTS);
}

inline bool CHF::Builder::getBig() {
  return _builder.getDataField<bool>(
      1376 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setBig(bool value) {
  _builder.setDataField<bool>(
      1376 * ::capnp::ELEMENTS, value);
}

inline bool CHF::Reader::getSampleAdj() const {
  return _reader.getDataField<bool>(
      1377 * ::capnp::ELEMENTS);
}

inline bool CHF::Builder::getSampleAdj() {
  return _builder.getDataField<bool>(
      1377 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setSampleAdj(bool value) {
  _builder.setDataField<bool>(
      1377 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getIpv4DstNextHop() const {
  return _reader.getDataField< ::uint32_t>(
      44 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getIpv4DstNextHop() {
  return _builder.getDataField< ::uint32_t>(
      44 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setIpv4DstNextHop( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      44 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getIpv4SrcNextHop() const {
  return _reader.getDataField< ::uint32_t>(
      45 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getIpv4SrcNextHop() {
  return _builder.getDataField< ::uint32_t>(
      45 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setIpv4SrcNextHop( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      45 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getSrcRoutePrefix() const {
  return _reader.getDataField< ::uint32_t>(
      46 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getSrcRoutePrefix() {
  return _builder.getDataField< ::uint32_t>(
      46 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setSrcRoutePrefix( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      46 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getDstRoutePrefix() const {
  return _reader.getDataField< ::uint32_t>(
      47 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getDstRoutePrefix() {
  return _builder.getDataField< ::uint32_t>(
      47 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setDstRoutePrefix( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      47 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t CHF::Reader::getSrcRouteLength() const {
  return _reader.getDataField< ::uint8_t>(
      173 * ::capnp::ELEMENTS);
}

inline  ::uint8_t CHF::Builder::getSrcRouteLength() {
  return _builder.getDataField< ::uint8_t>(
      173 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setSrcRouteLength( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      173 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t CHF::Reader::getDstRouteLength() const {
  return _reader.getDataField< ::uint8_t>(
      174 * ::capnp::ELEMENTS);
}

inline  ::uint8_t CHF::Builder::getDstRouteLength() {
  return _builder.getDataField< ::uint8_t>(
      174 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setDstRouteLength( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      174 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getSrcSecondAsn() const {
  return _reader.getDataField< ::uint32_t>(
      48 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getSrcSecondAsn() {
  return _builder.getDataField< ::uint32_t>(
      48 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setSrcSecondAsn( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      48 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getDstSecondAsn() const {
  return _reader.getDataField< ::uint32_t>(
      49 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getDstSecondAsn() {
  return _builder.getDataField< ::uint32_t>(
      49 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setDstSecondAsn( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      49 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getSrcThirdAsn() const {
  return _reader.getDataField< ::uint32_t>(
      50 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getSrcThirdAsn() {
  return _builder.getDataField< ::uint32_t>(
      50 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setSrcThirdAsn( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      50 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CHF::Reader::getDstThirdAsn() const {
  return _reader.getDataField< ::uint32_t>(
      51 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CHF::Builder::getDstThirdAsn() {
  return _builder.getDataField< ::uint32_t>(
      51 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setDstThirdAsn( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      51 * ::capnp::ELEMENTS, value);
}

inline bool CHF::Reader::hasIpv6DstAddr() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool CHF::Builder::hasIpv6DstAddr() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CHF::Reader::getIpv6DstAddr() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CHF::Builder::getIpv6DstAddr() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void CHF::Builder::setIpv6DstAddr( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CHF::Builder::initIpv6DstAddr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void CHF::Builder::adoptIpv6DstAddr(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CHF::Builder::disownIpv6DstAddr() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool CHF::Reader::hasIpv6SrcAddr() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool CHF::Builder::hasIpv6SrcAddr() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CHF::Reader::getIpv6SrcAddr() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CHF::Builder::getIpv6SrcAddr() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void CHF::Builder::setIpv6SrcAddr( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CHF::Builder::initIpv6SrcAddr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void CHF::Builder::adoptIpv6SrcAddr(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CHF::Builder::disownIpv6SrcAddr() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline  ::uint64_t CHF::Reader::getSrcEthMac() const {
  return _reader.getDataField< ::uint64_t>(
      26 * ::capnp::ELEMENTS);
}

inline  ::uint64_t CHF::Builder::getSrcEthMac() {
  return _builder.getDataField< ::uint64_t>(
      26 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setSrcEthMac( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      26 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CHF::Reader::getDstEthMac() const {
  return _reader.getDataField< ::uint64_t>(
      27 * ::capnp::ELEMENTS);
}

inline  ::uint64_t CHF::Builder::getDstEthMac() {
  return _builder.getDataField< ::uint64_t>(
      27 * ::capnp::ELEMENTS);
}
inline void CHF::Builder::setDstEthMac( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      27 * ::capnp::ELEMENTS, value);
}

inline bool CHF::Reader::hasCustom() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool CHF::Builder::hasCustom() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::kentik::chf::Custom>::Reader CHF::Reader::getCustom() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::kentik::chf::Custom>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::kentik::chf::Custom>::Builder CHF::Builder::getCustom() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::kentik::chf::Custom>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void CHF::Builder::setCustom( ::capnp::List< ::kentik::chf::Custom>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::kentik::chf::Custom>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::kentik::chf::Custom>::Builder CHF::Builder::initCustom(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::kentik::chf::Custom>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void CHF::Builder::adoptCustom(
    ::capnp::Orphan< ::capnp::List< ::kentik::chf::Custom>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::kentik::chf::Custom>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::kentik::chf::Custom>> CHF::Builder::disownCustom() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::kentik::chf::Custom>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool CHF::Reader::hasIpv6SrcNextHop() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool CHF::Builder::hasIpv6SrcNextHop() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CHF::Reader::getIpv6SrcNextHop() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CHF::Builder::getIpv6SrcNextHop() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void CHF::Builder::setIpv6SrcNextHop( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CHF::Builder::initIpv6SrcNextHop(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void CHF::Builder::adoptIpv6SrcNextHop(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CHF::Builder::disownIpv6SrcNextHop() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool CHF::Reader::hasIpv6DstNextHop() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool CHF::Builder::hasIpv6DstNextHop() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CHF::Reader::getIpv6DstNextHop() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CHF::Builder::getIpv6DstNextHop() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void CHF::Builder::setIpv6DstNextHop( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CHF::Builder::initIpv6DstNextHop(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void CHF::Builder::adoptIpv6DstNextHop(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CHF::Builder::disownIpv6DstNextHop() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

inline bool CHF::Reader::hasIpv6SrcRoutePrefix() const {
  return !_reader.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline bool CHF::Builder::hasIpv6SrcRoutePrefix() {
  return !_builder.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CHF::Reader::getIpv6SrcRoutePrefix() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(12 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CHF::Builder::getIpv6SrcRoutePrefix() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}
inline void CHF::Builder::setIpv6SrcRoutePrefix( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CHF::Builder::initIpv6SrcRoutePrefix(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(12 * ::capnp::POINTERS), size);
}
inline void CHF::Builder::adoptIpv6SrcRoutePrefix(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(12 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CHF::Builder::disownIpv6SrcRoutePrefix() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}

inline bool CHF::Reader::hasIpv6DstRoutePrefix() const {
  return !_reader.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline bool CHF::Builder::hasIpv6DstRoutePrefix() {
  return !_builder.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CHF::Reader::getIpv6DstRoutePrefix() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(13 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CHF::Builder::getIpv6DstRoutePrefix() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}
inline void CHF::Builder::setIpv6DstRoutePrefix( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CHF::Builder::initIpv6DstRoutePrefix(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(13 * ::capnp::POINTERS), size);
}
inline void CHF::Builder::adoptIpv6DstRoutePrefix(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(13 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CHF::Builder::disownIpv6DstRoutePrefix() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}

inline bool PackedCHF::Reader::hasMsgs() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool PackedCHF::Builder::hasMsgs() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::kentik::chf::CHF>::Reader PackedCHF::Reader::getMsgs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::kentik::chf::CHF>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::kentik::chf::CHF>::Builder PackedCHF::Builder::getMsgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::kentik::chf::CHF>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void PackedCHF::Builder::setMsgs( ::capnp::List< ::kentik::chf::CHF>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::kentik::chf::CHF>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::kentik::chf::CHF>::Builder PackedCHF::Builder::initMsgs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::kentik::chf::CHF>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void PackedCHF::Builder::adoptMsgs(
    ::capnp::Orphan< ::capnp::List< ::kentik::chf::CHF>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::kentik::chf::CHF>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::kentik::chf::CHF>> PackedCHF::Builder::disownMsgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::kentik::chf::CHF>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_c75f49ee0059f55d_
