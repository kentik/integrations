// +build ignore

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fbresult.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fbresult.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fbquery {

namespace {

const ::google::protobuf::Descriptor* QueryResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_ColumnHeaderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_ColumnHeaderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_InputParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_InputParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_Int32Column_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_Int32Column_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_Int64Column_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_Int64Column_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_UInt32Column_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_UInt32Column_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_UInt64Column_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_UInt64Column_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_StringColumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_StringColumn_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_BytesColumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_BytesColumn_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_FloatColumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_FloatColumn_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_DoubleColumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_DoubleColumn_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinalResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fbresult_2eproto() {
  protobuf_AddDesc_fbresult_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fbresult.proto");
  GOOGLE_CHECK(file != NULL);
  QueryResult_descriptor_ = file->message_type(0);
  static const int QueryResult_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, int32column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, int64column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, uint32column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, uint64column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, stringcolumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, bytescolumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, floatcolumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, doublecolumn_),
  };
  QueryResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_descriptor_,
      QueryResult::default_instance_,
      QueryResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult));
  QueryResult_ColumnHeaderInfo_descriptor_ = QueryResult_descriptor_->nested_type(0);
  static const int QueryResult_ColumnHeaderInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_ColumnHeaderInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_ColumnHeaderInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_ColumnHeaderInfo, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_ColumnHeaderInfo, aggname_),
  };
  QueryResult_ColumnHeaderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_ColumnHeaderInfo_descriptor_,
      QueryResult_ColumnHeaderInfo::default_instance_,
      QueryResult_ColumnHeaderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_ColumnHeaderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_ColumnHeaderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_ColumnHeaderInfo));
  QueryResult_InputParams_descriptor_ = QueryResult_descriptor_->nested_type(1);
  static const int QueryResult_InputParams_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, i_orderby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, i_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, i_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, i_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, i_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, i_device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, i_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, i_sq_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, i_sq_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, i_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, i_device_site_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, i_device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, i_debug_info_),
  };
  QueryResult_InputParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_InputParams_descriptor_,
      QueryResult_InputParams::default_instance_,
      QueryResult_InputParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_InputParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_InputParams));
  QueryResult_Int32Column_descriptor_ = QueryResult_descriptor_->nested_type(2);
  static const int QueryResult_Int32Column_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Int32Column, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Int32Column, values_),
  };
  QueryResult_Int32Column_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_Int32Column_descriptor_,
      QueryResult_Int32Column::default_instance_,
      QueryResult_Int32Column_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Int32Column, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Int32Column, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_Int32Column));
  QueryResult_Int64Column_descriptor_ = QueryResult_descriptor_->nested_type(3);
  static const int QueryResult_Int64Column_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Int64Column, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Int64Column, values_),
  };
  QueryResult_Int64Column_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_Int64Column_descriptor_,
      QueryResult_Int64Column::default_instance_,
      QueryResult_Int64Column_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Int64Column, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Int64Column, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_Int64Column));
  QueryResult_UInt32Column_descriptor_ = QueryResult_descriptor_->nested_type(4);
  static const int QueryResult_UInt32Column_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_UInt32Column, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_UInt32Column, values_),
  };
  QueryResult_UInt32Column_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_UInt32Column_descriptor_,
      QueryResult_UInt32Column::default_instance_,
      QueryResult_UInt32Column_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_UInt32Column, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_UInt32Column, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_UInt32Column));
  QueryResult_UInt64Column_descriptor_ = QueryResult_descriptor_->nested_type(5);
  static const int QueryResult_UInt64Column_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_UInt64Column, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_UInt64Column, values_),
  };
  QueryResult_UInt64Column_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_UInt64Column_descriptor_,
      QueryResult_UInt64Column::default_instance_,
      QueryResult_UInt64Column_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_UInt64Column, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_UInt64Column, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_UInt64Column));
  QueryResult_StringColumn_descriptor_ = QueryResult_descriptor_->nested_type(6);
  static const int QueryResult_StringColumn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_StringColumn, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_StringColumn, values_),
  };
  QueryResult_StringColumn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_StringColumn_descriptor_,
      QueryResult_StringColumn::default_instance_,
      QueryResult_StringColumn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_StringColumn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_StringColumn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_StringColumn));
  QueryResult_BytesColumn_descriptor_ = QueryResult_descriptor_->nested_type(7);
  static const int QueryResult_BytesColumn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_BytesColumn, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_BytesColumn, values_),
  };
  QueryResult_BytesColumn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_BytesColumn_descriptor_,
      QueryResult_BytesColumn::default_instance_,
      QueryResult_BytesColumn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_BytesColumn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_BytesColumn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_BytesColumn));
  QueryResult_FloatColumn_descriptor_ = QueryResult_descriptor_->nested_type(8);
  static const int QueryResult_FloatColumn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_FloatColumn, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_FloatColumn, values_),
  };
  QueryResult_FloatColumn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_FloatColumn_descriptor_,
      QueryResult_FloatColumn::default_instance_,
      QueryResult_FloatColumn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_FloatColumn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_FloatColumn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_FloatColumn));
  QueryResult_DoubleColumn_descriptor_ = QueryResult_descriptor_->nested_type(9);
  static const int QueryResult_DoubleColumn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DoubleColumn, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DoubleColumn, values_),
  };
  QueryResult_DoubleColumn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_DoubleColumn_descriptor_,
      QueryResult_DoubleColumn::default_instance_,
      QueryResult_DoubleColumn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DoubleColumn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DoubleColumn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_DoubleColumn));
  FinalResponse_descriptor_ = file->message_type(1);
  static const int FinalResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResponse, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResponse, requestkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResponse, fromcache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResponse, numresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResponse, thisresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResponse, missingmds_),
  };
  FinalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinalResponse_descriptor_,
      FinalResponse::default_instance_,
      FinalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinalResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fbresult_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_descriptor_, &QueryResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_ColumnHeaderInfo_descriptor_, &QueryResult_ColumnHeaderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_InputParams_descriptor_, &QueryResult_InputParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_Int32Column_descriptor_, &QueryResult_Int32Column::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_Int64Column_descriptor_, &QueryResult_Int64Column::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_UInt32Column_descriptor_, &QueryResult_UInt32Column::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_UInt64Column_descriptor_, &QueryResult_UInt64Column::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_StringColumn_descriptor_, &QueryResult_StringColumn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_BytesColumn_descriptor_, &QueryResult_BytesColumn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_FloatColumn_descriptor_, &QueryResult_FloatColumn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_DoubleColumn_descriptor_, &QueryResult_DoubleColumn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinalResponse_descriptor_, &FinalResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fbresult_2eproto() {
  delete QueryResult::default_instance_;
  delete QueryResult_reflection_;
  delete QueryResult_ColumnHeaderInfo::default_instance_;
  delete QueryResult_ColumnHeaderInfo_reflection_;
  delete QueryResult_InputParams::default_instance_;
  delete QueryResult_InputParams_reflection_;
  delete QueryResult_Int32Column::default_instance_;
  delete QueryResult_Int32Column_reflection_;
  delete QueryResult_Int64Column::default_instance_;
  delete QueryResult_Int64Column_reflection_;
  delete QueryResult_UInt32Column::default_instance_;
  delete QueryResult_UInt32Column_reflection_;
  delete QueryResult_UInt64Column::default_instance_;
  delete QueryResult_UInt64Column_reflection_;
  delete QueryResult_StringColumn::default_instance_;
  delete QueryResult_StringColumn_reflection_;
  delete QueryResult_BytesColumn::default_instance_;
  delete QueryResult_BytesColumn_reflection_;
  delete QueryResult_FloatColumn::default_instance_;
  delete QueryResult_FloatColumn_reflection_;
  delete QueryResult_DoubleColumn::default_instance_;
  delete QueryResult_DoubleColumn_reflection_;
  delete FinalResponse::default_instance_;
  delete FinalResponse_reflection_;
}

void protobuf_AddDesc_fbresult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016fbresult.proto\022\007fbquery\"\277\014\n\013QueryResul"
    "t\0220\n\006params\030\001 \001(\0132 .fbquery.QueryResult."
    "InputParams\0225\n\013int32Column\030\002 \003(\0132 .fbque"
    "ry.QueryResult.Int32Column\0225\n\013int64Colum"
    "n\030\003 \003(\0132 .fbquery.QueryResult.Int64Colum"
    "n\0227\n\014uint32Column\030\004 \003(\0132!.fbquery.QueryR"
    "esult.UInt32Column\0227\n\014uint64Column\030\005 \003(\013"
    "2!.fbquery.QueryResult.UInt64Column\0227\n\014s"
    "tringColumn\030\006 \003(\0132!.fbquery.QueryResult."
    "StringColumn\0225\n\013bytesColumn\030\007 \003(\0132 .fbqu"
    "ery.QueryResult.BytesColumn\0225\n\013floatColu"
    "mn\030\010 \003(\0132 .fbquery.QueryResult.FloatColu"
    "mn\0227\n\014doubleColumn\030\t \003(\0132!.fbquery.Query"
    "Result.DoubleColumn\032S\n\020ColumnHeaderInfo\022"
    "\014\n\004name\030\001 \001(\t\022\020\n\010position\030\002 \001(\005\022\016\n\006forma"
    "t\030\003 \001(\t\022\017\n\007aggName\030\004 \001(\t\032\234\002\n\013InputParams"
    "\022\021\n\ti_orderby\030\001 \001(\t\022\020\n\010i_offset\030\002 \001(\005\022\017\n"
    "\007i_limit\030\003 \001(\005\022\024\n\014i_start_time\030\004 \001(\003\022\022\n\n"
    "i_end_time\030\005 \001(\003\022\025\n\ri_device_name\030\006 \001(\t\022"
    "\023\n\013i_device_id\030\007 \001(\003\022\022\n\ni_sq_start\030\010 \001(\003"
    "\022\020\n\010i_sq_end\030\t \001(\003\022\022\n\ni_duration\030\n \001(\005\022\032"
    "\n\022i_device_site_name\030\013 \001(\t\022\025\n\ri_device_t"
    "ype\030\014 \001(\t\022\024\n\014i_debug_info\030\r \001(\t\032X\n\013Int32"
    "Column\0225\n\006header\030\001 \001(\0132%.fbquery.QueryRe"
    "sult.ColumnHeaderInfo\022\022\n\006values\030\002 \003(\005B\002\020"
    "\001\032X\n\013Int64Column\0225\n\006header\030\001 \001(\0132%.fbque"
    "ry.QueryResult.ColumnHeaderInfo\022\022\n\006value"
    "s\030\002 \003(\003B\002\020\001\032Y\n\014UInt32Column\0225\n\006header\030\001 "
    "\001(\0132%.fbquery.QueryResult.ColumnHeaderIn"
    "fo\022\022\n\006values\030\002 \003(\rB\002\020\001\032Y\n\014UInt64Column\0225"
    "\n\006header\030\001 \001(\0132%.fbquery.QueryResult.Col"
    "umnHeaderInfo\022\022\n\006values\030\002 \003(\004B\002\020\001\032U\n\014Str"
    "ingColumn\0225\n\006header\030\001 \001(\0132%.fbquery.Quer"
    "yResult.ColumnHeaderInfo\022\016\n\006values\030\002 \003(\t"
    "\032T\n\013BytesColumn\0225\n\006header\030\001 \001(\0132%.fbquer"
    "y.QueryResult.ColumnHeaderInfo\022\016\n\006values"
    "\030\002 \003(\014\032X\n\013FloatColumn\0225\n\006header\030\001 \001(\0132%."
    "fbquery.QueryResult.ColumnHeaderInfo\022\022\n\006"
    "values\030\002 \003(\002B\002\020\001\032Y\n\014DoubleColumn\0225\n\006head"
    "er\030\001 \001(\0132%.fbquery.QueryResult.ColumnHea"
    "derInfo\022\022\n\006values\030\002 \003(\001B\002\020\001\"\305\001\n\rFinalRes"
    "ponse\022\016\n\006Target\030\001 \002(\t\022\021\n\tRequestID\030\002 \002(\t"
    "\022$\n\006Result\030\003 \001(\0132\024.fbquery.QueryResult\022\r"
    "\n\005Error\030\004 \001(\t\022\022\n\nRequestKey\030\005 \001(\t\022\021\n\tFro"
    "mCache\030\006 \001(\010\022\017\n\007NumResp\030\007 \001(\005\022\020\n\010ThisRes"
    "p\030\010 \001(\005\022\022\n\nMissingMDS\030\t \001(\010", 1827);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fbresult.proto", &protobuf_RegisterTypes);
  QueryResult::default_instance_ = new QueryResult();
  QueryResult_ColumnHeaderInfo::default_instance_ = new QueryResult_ColumnHeaderInfo();
  QueryResult_InputParams::default_instance_ = new QueryResult_InputParams();
  QueryResult_Int32Column::default_instance_ = new QueryResult_Int32Column();
  QueryResult_Int64Column::default_instance_ = new QueryResult_Int64Column();
  QueryResult_UInt32Column::default_instance_ = new QueryResult_UInt32Column();
  QueryResult_UInt64Column::default_instance_ = new QueryResult_UInt64Column();
  QueryResult_StringColumn::default_instance_ = new QueryResult_StringColumn();
  QueryResult_BytesColumn::default_instance_ = new QueryResult_BytesColumn();
  QueryResult_FloatColumn::default_instance_ = new QueryResult_FloatColumn();
  QueryResult_DoubleColumn::default_instance_ = new QueryResult_DoubleColumn();
  FinalResponse::default_instance_ = new FinalResponse();
  QueryResult::default_instance_->InitAsDefaultInstance();
  QueryResult_ColumnHeaderInfo::default_instance_->InitAsDefaultInstance();
  QueryResult_InputParams::default_instance_->InitAsDefaultInstance();
  QueryResult_Int32Column::default_instance_->InitAsDefaultInstance();
  QueryResult_Int64Column::default_instance_->InitAsDefaultInstance();
  QueryResult_UInt32Column::default_instance_->InitAsDefaultInstance();
  QueryResult_UInt64Column::default_instance_->InitAsDefaultInstance();
  QueryResult_StringColumn::default_instance_->InitAsDefaultInstance();
  QueryResult_BytesColumn::default_instance_->InitAsDefaultInstance();
  QueryResult_FloatColumn::default_instance_->InitAsDefaultInstance();
  QueryResult_DoubleColumn::default_instance_->InitAsDefaultInstance();
  FinalResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fbresult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fbresult_2eproto {
  StaticDescriptorInitializer_fbresult_2eproto() {
    protobuf_AddDesc_fbresult_2eproto();
  }
} static_descriptor_initializer_fbresult_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int QueryResult_ColumnHeaderInfo::kNameFieldNumber;
const int QueryResult_ColumnHeaderInfo::kPositionFieldNumber;
const int QueryResult_ColumnHeaderInfo::kFormatFieldNumber;
const int QueryResult_ColumnHeaderInfo::kAggNameFieldNumber;
#endif  // !_MSC_VER

QueryResult_ColumnHeaderInfo::QueryResult_ColumnHeaderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbquery.QueryResult.ColumnHeaderInfo)
}

void QueryResult_ColumnHeaderInfo::InitAsDefaultInstance() {
}

QueryResult_ColumnHeaderInfo::QueryResult_ColumnHeaderInfo(const QueryResult_ColumnHeaderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbquery.QueryResult.ColumnHeaderInfo)
}

void QueryResult_ColumnHeaderInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = 0;
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aggname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_ColumnHeaderInfo::~QueryResult_ColumnHeaderInfo() {
  // @@protoc_insertion_point(destructor:fbquery.QueryResult.ColumnHeaderInfo)
  SharedDtor();
}

void QueryResult_ColumnHeaderInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_;
  }
  if (aggname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete aggname_;
  }
  if (this != default_instance_) {
  }
}

void QueryResult_ColumnHeaderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_ColumnHeaderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_ColumnHeaderInfo_descriptor_;
}

const QueryResult_ColumnHeaderInfo& QueryResult_ColumnHeaderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbresult_2eproto();
  return *default_instance_;
}

QueryResult_ColumnHeaderInfo* QueryResult_ColumnHeaderInfo::default_instance_ = NULL;

QueryResult_ColumnHeaderInfo* QueryResult_ColumnHeaderInfo::New() const {
  return new QueryResult_ColumnHeaderInfo;
}

void QueryResult_ColumnHeaderInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    position_ = 0;
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        format_->clear();
      }
    }
    if (has_aggname()) {
      if (aggname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        aggname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_ColumnHeaderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbquery.QueryResult.ColumnHeaderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional int32 position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_format;
        break;
      }

      // optional string format = 3;
      case 3: {
        if (tag == 26) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_aggName;
        break;
      }

      // optional string aggName = 4;
      case 4: {
        if (tag == 34) {
         parse_aggName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aggname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aggname().data(), this->aggname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "aggname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbquery.QueryResult.ColumnHeaderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbquery.QueryResult.ColumnHeaderInfo)
  return false;
#undef DO_
}

void QueryResult_ColumnHeaderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbquery.QueryResult.ColumnHeaderInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  // optional string format = 3;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->format(), output);
  }

  // optional string aggName = 4;
  if (has_aggname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aggname().data(), this->aggname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "aggname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->aggname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbquery.QueryResult.ColumnHeaderInfo)
}

::google::protobuf::uint8* QueryResult_ColumnHeaderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbquery.QueryResult.ColumnHeaderInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  // optional string format = 3;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->format(), target);
  }

  // optional string aggName = 4;
  if (has_aggname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aggname().data(), this->aggname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "aggname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->aggname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbquery.QueryResult.ColumnHeaderInfo)
  return target;
}

int QueryResult_ColumnHeaderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional string format = 3;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional string aggName = 4;
    if (has_aggname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aggname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_ColumnHeaderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_ColumnHeaderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_ColumnHeaderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_ColumnHeaderInfo::MergeFrom(const QueryResult_ColumnHeaderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_aggname()) {
      set_aggname(from.aggname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_ColumnHeaderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_ColumnHeaderInfo::CopyFrom(const QueryResult_ColumnHeaderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_ColumnHeaderInfo::IsInitialized() const {

  return true;
}

void QueryResult_ColumnHeaderInfo::Swap(QueryResult_ColumnHeaderInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(format_, other->format_);
    std::swap(aggname_, other->aggname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_ColumnHeaderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_ColumnHeaderInfo_descriptor_;
  metadata.reflection = QueryResult_ColumnHeaderInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult_InputParams::kIOrderbyFieldNumber;
const int QueryResult_InputParams::kIOffsetFieldNumber;
const int QueryResult_InputParams::kILimitFieldNumber;
const int QueryResult_InputParams::kIStartTimeFieldNumber;
const int QueryResult_InputParams::kIEndTimeFieldNumber;
const int QueryResult_InputParams::kIDeviceNameFieldNumber;
const int QueryResult_InputParams::kIDeviceIdFieldNumber;
const int QueryResult_InputParams::kISqStartFieldNumber;
const int QueryResult_InputParams::kISqEndFieldNumber;
const int QueryResult_InputParams::kIDurationFieldNumber;
const int QueryResult_InputParams::kIDeviceSiteNameFieldNumber;
const int QueryResult_InputParams::kIDeviceTypeFieldNumber;
const int QueryResult_InputParams::kIDebugInfoFieldNumber;
#endif  // !_MSC_VER

QueryResult_InputParams::QueryResult_InputParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbquery.QueryResult.InputParams)
}

void QueryResult_InputParams::InitAsDefaultInstance() {
}

QueryResult_InputParams::QueryResult_InputParams(const QueryResult_InputParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbquery.QueryResult.InputParams)
}

void QueryResult_InputParams::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  i_orderby_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  i_offset_ = 0;
  i_limit_ = 0;
  i_start_time_ = GOOGLE_LONGLONG(0);
  i_end_time_ = GOOGLE_LONGLONG(0);
  i_device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  i_device_id_ = GOOGLE_LONGLONG(0);
  i_sq_start_ = GOOGLE_LONGLONG(0);
  i_sq_end_ = GOOGLE_LONGLONG(0);
  i_duration_ = 0;
  i_device_site_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  i_device_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  i_debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_InputParams::~QueryResult_InputParams() {
  // @@protoc_insertion_point(destructor:fbquery.QueryResult.InputParams)
  SharedDtor();
}

void QueryResult_InputParams::SharedDtor() {
  if (i_orderby_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete i_orderby_;
  }
  if (i_device_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete i_device_name_;
  }
  if (i_device_site_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete i_device_site_name_;
  }
  if (i_device_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete i_device_type_;
  }
  if (i_debug_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete i_debug_info_;
  }
  if (this != default_instance_) {
  }
}

void QueryResult_InputParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_InputParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_InputParams_descriptor_;
}

const QueryResult_InputParams& QueryResult_InputParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbresult_2eproto();
  return *default_instance_;
}

QueryResult_InputParams* QueryResult_InputParams::default_instance_ = NULL;

QueryResult_InputParams* QueryResult_InputParams::New() const {
  return new QueryResult_InputParams;
}

void QueryResult_InputParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryResult_InputParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(i_offset_, i_end_time_);
    ZR_(i_device_id_, i_sq_start_);
    if (has_i_orderby()) {
      if (i_orderby_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        i_orderby_->clear();
      }
    }
    if (has_i_device_name()) {
      if (i_device_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        i_device_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    i_sq_end_ = GOOGLE_LONGLONG(0);
    i_duration_ = 0;
    if (has_i_device_site_name()) {
      if (i_device_site_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        i_device_site_name_->clear();
      }
    }
    if (has_i_device_type()) {
      if (i_device_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        i_device_type_->clear();
      }
    }
    if (has_i_debug_info()) {
      if (i_debug_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        i_debug_info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_InputParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbquery.QueryResult.InputParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string i_orderby = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_i_orderby()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->i_orderby().data(), this->i_orderby().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "i_orderby");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_i_offset;
        break;
      }

      // optional int32 i_offset = 2;
      case 2: {
        if (tag == 16) {
         parse_i_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_offset_)));
          set_has_i_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_i_limit;
        break;
      }

      // optional int32 i_limit = 3;
      case 3: {
        if (tag == 24) {
         parse_i_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_limit_)));
          set_has_i_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_i_start_time;
        break;
      }

      // optional int64 i_start_time = 4;
      case 4: {
        if (tag == 32) {
         parse_i_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i_start_time_)));
          set_has_i_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_i_end_time;
        break;
      }

      // optional int64 i_end_time = 5;
      case 5: {
        if (tag == 40) {
         parse_i_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i_end_time_)));
          set_has_i_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_i_device_name;
        break;
      }

      // optional string i_device_name = 6;
      case 6: {
        if (tag == 50) {
         parse_i_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_i_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->i_device_name().data(), this->i_device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "i_device_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_i_device_id;
        break;
      }

      // optional int64 i_device_id = 7;
      case 7: {
        if (tag == 56) {
         parse_i_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i_device_id_)));
          set_has_i_device_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_i_sq_start;
        break;
      }

      // optional int64 i_sq_start = 8;
      case 8: {
        if (tag == 64) {
         parse_i_sq_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i_sq_start_)));
          set_has_i_sq_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_i_sq_end;
        break;
      }

      // optional int64 i_sq_end = 9;
      case 9: {
        if (tag == 72) {
         parse_i_sq_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i_sq_end_)));
          set_has_i_sq_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_i_duration;
        break;
      }

      // optional int32 i_duration = 10;
      case 10: {
        if (tag == 80) {
         parse_i_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_duration_)));
          set_has_i_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_i_device_site_name;
        break;
      }

      // optional string i_device_site_name = 11;
      case 11: {
        if (tag == 90) {
         parse_i_device_site_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_i_device_site_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->i_device_site_name().data(), this->i_device_site_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "i_device_site_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_i_device_type;
        break;
      }

      // optional string i_device_type = 12;
      case 12: {
        if (tag == 98) {
         parse_i_device_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_i_device_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->i_device_type().data(), this->i_device_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "i_device_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_i_debug_info;
        break;
      }

      // optional string i_debug_info = 13;
      case 13: {
        if (tag == 106) {
         parse_i_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_i_debug_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->i_debug_info().data(), this->i_debug_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "i_debug_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbquery.QueryResult.InputParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbquery.QueryResult.InputParams)
  return false;
#undef DO_
}

void QueryResult_InputParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbquery.QueryResult.InputParams)
  // optional string i_orderby = 1;
  if (has_i_orderby()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->i_orderby().data(), this->i_orderby().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "i_orderby");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->i_orderby(), output);
  }

  // optional int32 i_offset = 2;
  if (has_i_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->i_offset(), output);
  }

  // optional int32 i_limit = 3;
  if (has_i_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->i_limit(), output);
  }

  // optional int64 i_start_time = 4;
  if (has_i_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->i_start_time(), output);
  }

  // optional int64 i_end_time = 5;
  if (has_i_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->i_end_time(), output);
  }

  // optional string i_device_name = 6;
  if (has_i_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->i_device_name().data(), this->i_device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "i_device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->i_device_name(), output);
  }

  // optional int64 i_device_id = 7;
  if (has_i_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->i_device_id(), output);
  }

  // optional int64 i_sq_start = 8;
  if (has_i_sq_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->i_sq_start(), output);
  }

  // optional int64 i_sq_end = 9;
  if (has_i_sq_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->i_sq_end(), output);
  }

  // optional int32 i_duration = 10;
  if (has_i_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->i_duration(), output);
  }

  // optional string i_device_site_name = 11;
  if (has_i_device_site_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->i_device_site_name().data(), this->i_device_site_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "i_device_site_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->i_device_site_name(), output);
  }

  // optional string i_device_type = 12;
  if (has_i_device_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->i_device_type().data(), this->i_device_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "i_device_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->i_device_type(), output);
  }

  // optional string i_debug_info = 13;
  if (has_i_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->i_debug_info().data(), this->i_debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "i_debug_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->i_debug_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbquery.QueryResult.InputParams)
}

::google::protobuf::uint8* QueryResult_InputParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbquery.QueryResult.InputParams)
  // optional string i_orderby = 1;
  if (has_i_orderby()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->i_orderby().data(), this->i_orderby().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "i_orderby");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->i_orderby(), target);
  }

  // optional int32 i_offset = 2;
  if (has_i_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->i_offset(), target);
  }

  // optional int32 i_limit = 3;
  if (has_i_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->i_limit(), target);
  }

  // optional int64 i_start_time = 4;
  if (has_i_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->i_start_time(), target);
  }

  // optional int64 i_end_time = 5;
  if (has_i_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->i_end_time(), target);
  }

  // optional string i_device_name = 6;
  if (has_i_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->i_device_name().data(), this->i_device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "i_device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->i_device_name(), target);
  }

  // optional int64 i_device_id = 7;
  if (has_i_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->i_device_id(), target);
  }

  // optional int64 i_sq_start = 8;
  if (has_i_sq_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->i_sq_start(), target);
  }

  // optional int64 i_sq_end = 9;
  if (has_i_sq_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->i_sq_end(), target);
  }

  // optional int32 i_duration = 10;
  if (has_i_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->i_duration(), target);
  }

  // optional string i_device_site_name = 11;
  if (has_i_device_site_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->i_device_site_name().data(), this->i_device_site_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "i_device_site_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->i_device_site_name(), target);
  }

  // optional string i_device_type = 12;
  if (has_i_device_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->i_device_type().data(), this->i_device_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "i_device_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->i_device_type(), target);
  }

  // optional string i_debug_info = 13;
  if (has_i_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->i_debug_info().data(), this->i_debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "i_debug_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->i_debug_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbquery.QueryResult.InputParams)
  return target;
}

int QueryResult_InputParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string i_orderby = 1;
    if (has_i_orderby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->i_orderby());
    }

    // optional int32 i_offset = 2;
    if (has_i_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i_offset());
    }

    // optional int32 i_limit = 3;
    if (has_i_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i_limit());
    }

    // optional int64 i_start_time = 4;
    if (has_i_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->i_start_time());
    }

    // optional int64 i_end_time = 5;
    if (has_i_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->i_end_time());
    }

    // optional string i_device_name = 6;
    if (has_i_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->i_device_name());
    }

    // optional int64 i_device_id = 7;
    if (has_i_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->i_device_id());
    }

    // optional int64 i_sq_start = 8;
    if (has_i_sq_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->i_sq_start());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 i_sq_end = 9;
    if (has_i_sq_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->i_sq_end());
    }

    // optional int32 i_duration = 10;
    if (has_i_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i_duration());
    }

    // optional string i_device_site_name = 11;
    if (has_i_device_site_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->i_device_site_name());
    }

    // optional string i_device_type = 12;
    if (has_i_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->i_device_type());
    }

    // optional string i_debug_info = 13;
    if (has_i_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->i_debug_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_InputParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_InputParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_InputParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_InputParams::MergeFrom(const QueryResult_InputParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_i_orderby()) {
      set_i_orderby(from.i_orderby());
    }
    if (from.has_i_offset()) {
      set_i_offset(from.i_offset());
    }
    if (from.has_i_limit()) {
      set_i_limit(from.i_limit());
    }
    if (from.has_i_start_time()) {
      set_i_start_time(from.i_start_time());
    }
    if (from.has_i_end_time()) {
      set_i_end_time(from.i_end_time());
    }
    if (from.has_i_device_name()) {
      set_i_device_name(from.i_device_name());
    }
    if (from.has_i_device_id()) {
      set_i_device_id(from.i_device_id());
    }
    if (from.has_i_sq_start()) {
      set_i_sq_start(from.i_sq_start());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_i_sq_end()) {
      set_i_sq_end(from.i_sq_end());
    }
    if (from.has_i_duration()) {
      set_i_duration(from.i_duration());
    }
    if (from.has_i_device_site_name()) {
      set_i_device_site_name(from.i_device_site_name());
    }
    if (from.has_i_device_type()) {
      set_i_device_type(from.i_device_type());
    }
    if (from.has_i_debug_info()) {
      set_i_debug_info(from.i_debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_InputParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_InputParams::CopyFrom(const QueryResult_InputParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_InputParams::IsInitialized() const {

  return true;
}

void QueryResult_InputParams::Swap(QueryResult_InputParams* other) {
  if (other != this) {
    std::swap(i_orderby_, other->i_orderby_);
    std::swap(i_offset_, other->i_offset_);
    std::swap(i_limit_, other->i_limit_);
    std::swap(i_start_time_, other->i_start_time_);
    std::swap(i_end_time_, other->i_end_time_);
    std::swap(i_device_name_, other->i_device_name_);
    std::swap(i_device_id_, other->i_device_id_);
    std::swap(i_sq_start_, other->i_sq_start_);
    std::swap(i_sq_end_, other->i_sq_end_);
    std::swap(i_duration_, other->i_duration_);
    std::swap(i_device_site_name_, other->i_device_site_name_);
    std::swap(i_device_type_, other->i_device_type_);
    std::swap(i_debug_info_, other->i_debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_InputParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_InputParams_descriptor_;
  metadata.reflection = QueryResult_InputParams_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult_Int32Column::kHeaderFieldNumber;
const int QueryResult_Int32Column::kValuesFieldNumber;
#endif  // !_MSC_VER

QueryResult_Int32Column::QueryResult_Int32Column()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbquery.QueryResult.Int32Column)
}

void QueryResult_Int32Column::InitAsDefaultInstance() {
  header_ = const_cast< ::fbquery::QueryResult_ColumnHeaderInfo*>(&::fbquery::QueryResult_ColumnHeaderInfo::default_instance());
}

QueryResult_Int32Column::QueryResult_Int32Column(const QueryResult_Int32Column& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbquery.QueryResult.Int32Column)
}

void QueryResult_Int32Column::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_Int32Column::~QueryResult_Int32Column() {
  // @@protoc_insertion_point(destructor:fbquery.QueryResult.Int32Column)
  SharedDtor();
}

void QueryResult_Int32Column::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void QueryResult_Int32Column::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_Int32Column::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_Int32Column_descriptor_;
}

const QueryResult_Int32Column& QueryResult_Int32Column::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbresult_2eproto();
  return *default_instance_;
}

QueryResult_Int32Column* QueryResult_Int32Column::default_instance_ = NULL;

QueryResult_Int32Column* QueryResult_Int32Column::New() const {
  return new QueryResult_Int32Column;
}

void QueryResult_Int32Column::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_Int32Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbquery.QueryResult.Int32Column)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated int32 values = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbquery.QueryResult.Int32Column)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbquery.QueryResult.Int32Column)
  return false;
#undef DO_
}

void QueryResult_Int32Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbquery.QueryResult.Int32Column)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated int32 values = 2 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbquery.QueryResult.Int32Column)
}

::google::protobuf::uint8* QueryResult_Int32Column::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbquery.QueryResult.Int32Column)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated int32 values = 2 [packed = true];
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbquery.QueryResult.Int32Column)
  return target;
}

int QueryResult_Int32Column::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated int32 values = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->values(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_Int32Column::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_Int32Column* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_Int32Column*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_Int32Column::MergeFrom(const QueryResult_Int32Column& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::fbquery::QueryResult_ColumnHeaderInfo::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_Int32Column::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_Int32Column::CopyFrom(const QueryResult_Int32Column& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_Int32Column::IsInitialized() const {

  return true;
}

void QueryResult_Int32Column::Swap(QueryResult_Int32Column* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_Int32Column::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_Int32Column_descriptor_;
  metadata.reflection = QueryResult_Int32Column_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult_Int64Column::kHeaderFieldNumber;
const int QueryResult_Int64Column::kValuesFieldNumber;
#endif  // !_MSC_VER

QueryResult_Int64Column::QueryResult_Int64Column()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbquery.QueryResult.Int64Column)
}

void QueryResult_Int64Column::InitAsDefaultInstance() {
  header_ = const_cast< ::fbquery::QueryResult_ColumnHeaderInfo*>(&::fbquery::QueryResult_ColumnHeaderInfo::default_instance());
}

QueryResult_Int64Column::QueryResult_Int64Column(const QueryResult_Int64Column& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbquery.QueryResult.Int64Column)
}

void QueryResult_Int64Column::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_Int64Column::~QueryResult_Int64Column() {
  // @@protoc_insertion_point(destructor:fbquery.QueryResult.Int64Column)
  SharedDtor();
}

void QueryResult_Int64Column::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void QueryResult_Int64Column::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_Int64Column::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_Int64Column_descriptor_;
}

const QueryResult_Int64Column& QueryResult_Int64Column::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbresult_2eproto();
  return *default_instance_;
}

QueryResult_Int64Column* QueryResult_Int64Column::default_instance_ = NULL;

QueryResult_Int64Column* QueryResult_Int64Column::New() const {
  return new QueryResult_Int64Column;
}

void QueryResult_Int64Column::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_Int64Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbquery.QueryResult.Int64Column)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated int64 values = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_values())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbquery.QueryResult.Int64Column)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbquery.QueryResult.Int64Column)
  return false;
#undef DO_
}

void QueryResult_Int64Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbquery.QueryResult.Int64Column)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated int64 values = 2 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbquery.QueryResult.Int64Column)
}

::google::protobuf::uint8* QueryResult_Int64Column::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbquery.QueryResult.Int64Column)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated int64 values = 2 [packed = true];
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbquery.QueryResult.Int64Column)
  return target;
}

int QueryResult_Int64Column::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated int64 values = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->values(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_Int64Column::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_Int64Column* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_Int64Column*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_Int64Column::MergeFrom(const QueryResult_Int64Column& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::fbquery::QueryResult_ColumnHeaderInfo::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_Int64Column::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_Int64Column::CopyFrom(const QueryResult_Int64Column& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_Int64Column::IsInitialized() const {

  return true;
}

void QueryResult_Int64Column::Swap(QueryResult_Int64Column* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_Int64Column::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_Int64Column_descriptor_;
  metadata.reflection = QueryResult_Int64Column_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult_UInt32Column::kHeaderFieldNumber;
const int QueryResult_UInt32Column::kValuesFieldNumber;
#endif  // !_MSC_VER

QueryResult_UInt32Column::QueryResult_UInt32Column()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbquery.QueryResult.UInt32Column)
}

void QueryResult_UInt32Column::InitAsDefaultInstance() {
  header_ = const_cast< ::fbquery::QueryResult_ColumnHeaderInfo*>(&::fbquery::QueryResult_ColumnHeaderInfo::default_instance());
}

QueryResult_UInt32Column::QueryResult_UInt32Column(const QueryResult_UInt32Column& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbquery.QueryResult.UInt32Column)
}

void QueryResult_UInt32Column::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_UInt32Column::~QueryResult_UInt32Column() {
  // @@protoc_insertion_point(destructor:fbquery.QueryResult.UInt32Column)
  SharedDtor();
}

void QueryResult_UInt32Column::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void QueryResult_UInt32Column::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_UInt32Column::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_UInt32Column_descriptor_;
}

const QueryResult_UInt32Column& QueryResult_UInt32Column::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbresult_2eproto();
  return *default_instance_;
}

QueryResult_UInt32Column* QueryResult_UInt32Column::default_instance_ = NULL;

QueryResult_UInt32Column* QueryResult_UInt32Column::New() const {
  return new QueryResult_UInt32Column;
}

void QueryResult_UInt32Column::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_UInt32Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbquery.QueryResult.UInt32Column)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated uint32 values = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_values())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbquery.QueryResult.UInt32Column)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbquery.QueryResult.UInt32Column)
  return false;
#undef DO_
}

void QueryResult_UInt32Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbquery.QueryResult.UInt32Column)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated uint32 values = 2 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbquery.QueryResult.UInt32Column)
}

::google::protobuf::uint8* QueryResult_UInt32Column::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbquery.QueryResult.UInt32Column)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated uint32 values = 2 [packed = true];
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbquery.QueryResult.UInt32Column)
  return target;
}

int QueryResult_UInt32Column::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated uint32 values = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->values(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_UInt32Column::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_UInt32Column* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_UInt32Column*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_UInt32Column::MergeFrom(const QueryResult_UInt32Column& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::fbquery::QueryResult_ColumnHeaderInfo::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_UInt32Column::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_UInt32Column::CopyFrom(const QueryResult_UInt32Column& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_UInt32Column::IsInitialized() const {

  return true;
}

void QueryResult_UInt32Column::Swap(QueryResult_UInt32Column* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_UInt32Column::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_UInt32Column_descriptor_;
  metadata.reflection = QueryResult_UInt32Column_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult_UInt64Column::kHeaderFieldNumber;
const int QueryResult_UInt64Column::kValuesFieldNumber;
#endif  // !_MSC_VER

QueryResult_UInt64Column::QueryResult_UInt64Column()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbquery.QueryResult.UInt64Column)
}

void QueryResult_UInt64Column::InitAsDefaultInstance() {
  header_ = const_cast< ::fbquery::QueryResult_ColumnHeaderInfo*>(&::fbquery::QueryResult_ColumnHeaderInfo::default_instance());
}

QueryResult_UInt64Column::QueryResult_UInt64Column(const QueryResult_UInt64Column& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbquery.QueryResult.UInt64Column)
}

void QueryResult_UInt64Column::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_UInt64Column::~QueryResult_UInt64Column() {
  // @@protoc_insertion_point(destructor:fbquery.QueryResult.UInt64Column)
  SharedDtor();
}

void QueryResult_UInt64Column::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void QueryResult_UInt64Column::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_UInt64Column::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_UInt64Column_descriptor_;
}

const QueryResult_UInt64Column& QueryResult_UInt64Column::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbresult_2eproto();
  return *default_instance_;
}

QueryResult_UInt64Column* QueryResult_UInt64Column::default_instance_ = NULL;

QueryResult_UInt64Column* QueryResult_UInt64Column::New() const {
  return new QueryResult_UInt64Column;
}

void QueryResult_UInt64Column::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_UInt64Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbquery.QueryResult.UInt64Column)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated uint64 values = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_values())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbquery.QueryResult.UInt64Column)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbquery.QueryResult.UInt64Column)
  return false;
#undef DO_
}

void QueryResult_UInt64Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbquery.QueryResult.UInt64Column)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated uint64 values = 2 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbquery.QueryResult.UInt64Column)
}

::google::protobuf::uint8* QueryResult_UInt64Column::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbquery.QueryResult.UInt64Column)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated uint64 values = 2 [packed = true];
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbquery.QueryResult.UInt64Column)
  return target;
}

int QueryResult_UInt64Column::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated uint64 values = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->values(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_UInt64Column::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_UInt64Column* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_UInt64Column*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_UInt64Column::MergeFrom(const QueryResult_UInt64Column& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::fbquery::QueryResult_ColumnHeaderInfo::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_UInt64Column::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_UInt64Column::CopyFrom(const QueryResult_UInt64Column& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_UInt64Column::IsInitialized() const {

  return true;
}

void QueryResult_UInt64Column::Swap(QueryResult_UInt64Column* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_UInt64Column::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_UInt64Column_descriptor_;
  metadata.reflection = QueryResult_UInt64Column_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult_StringColumn::kHeaderFieldNumber;
const int QueryResult_StringColumn::kValuesFieldNumber;
#endif  // !_MSC_VER

QueryResult_StringColumn::QueryResult_StringColumn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbquery.QueryResult.StringColumn)
}

void QueryResult_StringColumn::InitAsDefaultInstance() {
  header_ = const_cast< ::fbquery::QueryResult_ColumnHeaderInfo*>(&::fbquery::QueryResult_ColumnHeaderInfo::default_instance());
}

QueryResult_StringColumn::QueryResult_StringColumn(const QueryResult_StringColumn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbquery.QueryResult.StringColumn)
}

void QueryResult_StringColumn::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_StringColumn::~QueryResult_StringColumn() {
  // @@protoc_insertion_point(destructor:fbquery.QueryResult.StringColumn)
  SharedDtor();
}

void QueryResult_StringColumn::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void QueryResult_StringColumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_StringColumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_StringColumn_descriptor_;
}

const QueryResult_StringColumn& QueryResult_StringColumn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbresult_2eproto();
  return *default_instance_;
}

QueryResult_StringColumn* QueryResult_StringColumn::default_instance_ = NULL;

QueryResult_StringColumn* QueryResult_StringColumn::New() const {
  return new QueryResult_StringColumn;
}

void QueryResult_StringColumn::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_StringColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbquery.QueryResult.StringColumn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated string values = 2;
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "values");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbquery.QueryResult.StringColumn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbquery.QueryResult.StringColumn)
  return false;
#undef DO_
}

void QueryResult_StringColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbquery.QueryResult.StringColumn)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated string values = 2;
  for (int i = 0; i < this->values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->values(i).data(), this->values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbquery.QueryResult.StringColumn)
}

::google::protobuf::uint8* QueryResult_StringColumn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbquery.QueryResult.StringColumn)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated string values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbquery.QueryResult.StringColumn)
  return target;
}

int QueryResult_StringColumn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated string values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_StringColumn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_StringColumn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_StringColumn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_StringColumn::MergeFrom(const QueryResult_StringColumn& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::fbquery::QueryResult_ColumnHeaderInfo::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_StringColumn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_StringColumn::CopyFrom(const QueryResult_StringColumn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_StringColumn::IsInitialized() const {

  return true;
}

void QueryResult_StringColumn::Swap(QueryResult_StringColumn* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_StringColumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_StringColumn_descriptor_;
  metadata.reflection = QueryResult_StringColumn_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult_BytesColumn::kHeaderFieldNumber;
const int QueryResult_BytesColumn::kValuesFieldNumber;
#endif  // !_MSC_VER

QueryResult_BytesColumn::QueryResult_BytesColumn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbquery.QueryResult.BytesColumn)
}

void QueryResult_BytesColumn::InitAsDefaultInstance() {
  header_ = const_cast< ::fbquery::QueryResult_ColumnHeaderInfo*>(&::fbquery::QueryResult_ColumnHeaderInfo::default_instance());
}

QueryResult_BytesColumn::QueryResult_BytesColumn(const QueryResult_BytesColumn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbquery.QueryResult.BytesColumn)
}

void QueryResult_BytesColumn::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_BytesColumn::~QueryResult_BytesColumn() {
  // @@protoc_insertion_point(destructor:fbquery.QueryResult.BytesColumn)
  SharedDtor();
}

void QueryResult_BytesColumn::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void QueryResult_BytesColumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_BytesColumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_BytesColumn_descriptor_;
}

const QueryResult_BytesColumn& QueryResult_BytesColumn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbresult_2eproto();
  return *default_instance_;
}

QueryResult_BytesColumn* QueryResult_BytesColumn::default_instance_ = NULL;

QueryResult_BytesColumn* QueryResult_BytesColumn::New() const {
  return new QueryResult_BytesColumn;
}

void QueryResult_BytesColumn::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_BytesColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbquery.QueryResult.BytesColumn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated bytes values = 2;
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbquery.QueryResult.BytesColumn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbquery.QueryResult.BytesColumn)
  return false;
#undef DO_
}

void QueryResult_BytesColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbquery.QueryResult.BytesColumn)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated bytes values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbquery.QueryResult.BytesColumn)
}

::google::protobuf::uint8* QueryResult_BytesColumn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbquery.QueryResult.BytesColumn)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated bytes values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbquery.QueryResult.BytesColumn)
  return target;
}

int QueryResult_BytesColumn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated bytes values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_BytesColumn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_BytesColumn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_BytesColumn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_BytesColumn::MergeFrom(const QueryResult_BytesColumn& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::fbquery::QueryResult_ColumnHeaderInfo::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_BytesColumn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_BytesColumn::CopyFrom(const QueryResult_BytesColumn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_BytesColumn::IsInitialized() const {

  return true;
}

void QueryResult_BytesColumn::Swap(QueryResult_BytesColumn* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_BytesColumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_BytesColumn_descriptor_;
  metadata.reflection = QueryResult_BytesColumn_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult_FloatColumn::kHeaderFieldNumber;
const int QueryResult_FloatColumn::kValuesFieldNumber;
#endif  // !_MSC_VER

QueryResult_FloatColumn::QueryResult_FloatColumn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbquery.QueryResult.FloatColumn)
}

void QueryResult_FloatColumn::InitAsDefaultInstance() {
  header_ = const_cast< ::fbquery::QueryResult_ColumnHeaderInfo*>(&::fbquery::QueryResult_ColumnHeaderInfo::default_instance());
}

QueryResult_FloatColumn::QueryResult_FloatColumn(const QueryResult_FloatColumn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbquery.QueryResult.FloatColumn)
}

void QueryResult_FloatColumn::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_FloatColumn::~QueryResult_FloatColumn() {
  // @@protoc_insertion_point(destructor:fbquery.QueryResult.FloatColumn)
  SharedDtor();
}

void QueryResult_FloatColumn::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void QueryResult_FloatColumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_FloatColumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_FloatColumn_descriptor_;
}

const QueryResult_FloatColumn& QueryResult_FloatColumn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbresult_2eproto();
  return *default_instance_;
}

QueryResult_FloatColumn* QueryResult_FloatColumn::default_instance_ = NULL;

QueryResult_FloatColumn* QueryResult_FloatColumn::New() const {
  return new QueryResult_FloatColumn;
}

void QueryResult_FloatColumn::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_FloatColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbquery.QueryResult.FloatColumn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated float values = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_values())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbquery.QueryResult.FloatColumn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbquery.QueryResult.FloatColumn)
  return false;
#undef DO_
}

void QueryResult_FloatColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbquery.QueryResult.FloatColumn)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated float values = 2 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbquery.QueryResult.FloatColumn)
}

::google::protobuf::uint8* QueryResult_FloatColumn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbquery.QueryResult.FloatColumn)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated float values = 2 [packed = true];
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbquery.QueryResult.FloatColumn)
  return target;
}

int QueryResult_FloatColumn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated float values = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->values_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_FloatColumn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_FloatColumn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_FloatColumn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_FloatColumn::MergeFrom(const QueryResult_FloatColumn& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::fbquery::QueryResult_ColumnHeaderInfo::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_FloatColumn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_FloatColumn::CopyFrom(const QueryResult_FloatColumn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_FloatColumn::IsInitialized() const {

  return true;
}

void QueryResult_FloatColumn::Swap(QueryResult_FloatColumn* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_FloatColumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_FloatColumn_descriptor_;
  metadata.reflection = QueryResult_FloatColumn_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult_DoubleColumn::kHeaderFieldNumber;
const int QueryResult_DoubleColumn::kValuesFieldNumber;
#endif  // !_MSC_VER

QueryResult_DoubleColumn::QueryResult_DoubleColumn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbquery.QueryResult.DoubleColumn)
}

void QueryResult_DoubleColumn::InitAsDefaultInstance() {
  header_ = const_cast< ::fbquery::QueryResult_ColumnHeaderInfo*>(&::fbquery::QueryResult_ColumnHeaderInfo::default_instance());
}

QueryResult_DoubleColumn::QueryResult_DoubleColumn(const QueryResult_DoubleColumn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbquery.QueryResult.DoubleColumn)
}

void QueryResult_DoubleColumn::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_DoubleColumn::~QueryResult_DoubleColumn() {
  // @@protoc_insertion_point(destructor:fbquery.QueryResult.DoubleColumn)
  SharedDtor();
}

void QueryResult_DoubleColumn::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void QueryResult_DoubleColumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_DoubleColumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_DoubleColumn_descriptor_;
}

const QueryResult_DoubleColumn& QueryResult_DoubleColumn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbresult_2eproto();
  return *default_instance_;
}

QueryResult_DoubleColumn* QueryResult_DoubleColumn::default_instance_ = NULL;

QueryResult_DoubleColumn* QueryResult_DoubleColumn::New() const {
  return new QueryResult_DoubleColumn;
}

void QueryResult_DoubleColumn::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_DoubleColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbquery.QueryResult.DoubleColumn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated double values = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbquery.QueryResult.DoubleColumn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbquery.QueryResult.DoubleColumn)
  return false;
#undef DO_
}

void QueryResult_DoubleColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbquery.QueryResult.DoubleColumn)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated double values = 2 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbquery.QueryResult.DoubleColumn)
}

::google::protobuf::uint8* QueryResult_DoubleColumn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbquery.QueryResult.DoubleColumn)
  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated double values = 2 [packed = true];
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbquery.QueryResult.DoubleColumn)
  return target;
}

int QueryResult_DoubleColumn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated double values = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_DoubleColumn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_DoubleColumn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_DoubleColumn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_DoubleColumn::MergeFrom(const QueryResult_DoubleColumn& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::fbquery::QueryResult_ColumnHeaderInfo::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_DoubleColumn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_DoubleColumn::CopyFrom(const QueryResult_DoubleColumn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_DoubleColumn::IsInitialized() const {

  return true;
}

void QueryResult_DoubleColumn::Swap(QueryResult_DoubleColumn* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_DoubleColumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_DoubleColumn_descriptor_;
  metadata.reflection = QueryResult_DoubleColumn_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult::kParamsFieldNumber;
const int QueryResult::kInt32ColumnFieldNumber;
const int QueryResult::kInt64ColumnFieldNumber;
const int QueryResult::kUint32ColumnFieldNumber;
const int QueryResult::kUint64ColumnFieldNumber;
const int QueryResult::kStringColumnFieldNumber;
const int QueryResult::kBytesColumnFieldNumber;
const int QueryResult::kFloatColumnFieldNumber;
const int QueryResult::kDoubleColumnFieldNumber;
#endif  // !_MSC_VER

QueryResult::QueryResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbquery.QueryResult)
}

void QueryResult::InitAsDefaultInstance() {
  params_ = const_cast< ::fbquery::QueryResult_InputParams*>(&::fbquery::QueryResult_InputParams::default_instance());
}

QueryResult::QueryResult(const QueryResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbquery.QueryResult)
}

void QueryResult::SharedCtor() {
  _cached_size_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult::~QueryResult() {
  // @@protoc_insertion_point(destructor:fbquery.QueryResult)
  SharedDtor();
}

void QueryResult::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void QueryResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_descriptor_;
}

const QueryResult& QueryResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbresult_2eproto();
  return *default_instance_;
}

QueryResult* QueryResult::default_instance_ = NULL;

QueryResult* QueryResult::New() const {
  return new QueryResult;
}

void QueryResult::Clear() {
  if (has_params()) {
    if (params_ != NULL) params_->::fbquery::QueryResult_InputParams::Clear();
  }
  int32column_.Clear();
  int64column_.Clear();
  uint32column_.Clear();
  uint64column_.Clear();
  stringcolumn_.Clear();
  bytescolumn_.Clear();
  floatcolumn_.Clear();
  doublecolumn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbquery.QueryResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fbquery.QueryResult.InputParams params = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_int32Column;
        break;
      }

      // repeated .fbquery.QueryResult.Int32Column int32Column = 2;
      case 2: {
        if (tag == 18) {
         parse_int32Column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_int32column()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_int32Column;
        if (input->ExpectTag(26)) goto parse_int64Column;
        break;
      }

      // repeated .fbquery.QueryResult.Int64Column int64Column = 3;
      case 3: {
        if (tag == 26) {
         parse_int64Column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_int64column()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_int64Column;
        if (input->ExpectTag(34)) goto parse_uint32Column;
        break;
      }

      // repeated .fbquery.QueryResult.UInt32Column uint32Column = 4;
      case 4: {
        if (tag == 34) {
         parse_uint32Column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uint32column()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uint32Column;
        if (input->ExpectTag(42)) goto parse_uint64Column;
        break;
      }

      // repeated .fbquery.QueryResult.UInt64Column uint64Column = 5;
      case 5: {
        if (tag == 42) {
         parse_uint64Column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uint64column()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_uint64Column;
        if (input->ExpectTag(50)) goto parse_stringColumn;
        break;
      }

      // repeated .fbquery.QueryResult.StringColumn stringColumn = 6;
      case 6: {
        if (tag == 50) {
         parse_stringColumn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stringcolumn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stringColumn;
        if (input->ExpectTag(58)) goto parse_bytesColumn;
        break;
      }

      // repeated .fbquery.QueryResult.BytesColumn bytesColumn = 7;
      case 7: {
        if (tag == 58) {
         parse_bytesColumn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bytescolumn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_bytesColumn;
        if (input->ExpectTag(66)) goto parse_floatColumn;
        break;
      }

      // repeated .fbquery.QueryResult.FloatColumn floatColumn = 8;
      case 8: {
        if (tag == 66) {
         parse_floatColumn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_floatcolumn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_floatColumn;
        if (input->ExpectTag(74)) goto parse_doubleColumn;
        break;
      }

      // repeated .fbquery.QueryResult.DoubleColumn doubleColumn = 9;
      case 9: {
        if (tag == 74) {
         parse_doubleColumn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_doublecolumn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_doubleColumn;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbquery.QueryResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbquery.QueryResult)
  return false;
#undef DO_
}

void QueryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbquery.QueryResult)
  // optional .fbquery.QueryResult.InputParams params = 1;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->params(), output);
  }

  // repeated .fbquery.QueryResult.Int32Column int32Column = 2;
  for (int i = 0; i < this->int32column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->int32column(i), output);
  }

  // repeated .fbquery.QueryResult.Int64Column int64Column = 3;
  for (int i = 0; i < this->int64column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->int64column(i), output);
  }

  // repeated .fbquery.QueryResult.UInt32Column uint32Column = 4;
  for (int i = 0; i < this->uint32column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->uint32column(i), output);
  }

  // repeated .fbquery.QueryResult.UInt64Column uint64Column = 5;
  for (int i = 0; i < this->uint64column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->uint64column(i), output);
  }

  // repeated .fbquery.QueryResult.StringColumn stringColumn = 6;
  for (int i = 0; i < this->stringcolumn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stringcolumn(i), output);
  }

  // repeated .fbquery.QueryResult.BytesColumn bytesColumn = 7;
  for (int i = 0; i < this->bytescolumn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->bytescolumn(i), output);
  }

  // repeated .fbquery.QueryResult.FloatColumn floatColumn = 8;
  for (int i = 0; i < this->floatcolumn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->floatcolumn(i), output);
  }

  // repeated .fbquery.QueryResult.DoubleColumn doubleColumn = 9;
  for (int i = 0; i < this->doublecolumn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->doublecolumn(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbquery.QueryResult)
}

::google::protobuf::uint8* QueryResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbquery.QueryResult)
  // optional .fbquery.QueryResult.InputParams params = 1;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->params(), target);
  }

  // repeated .fbquery.QueryResult.Int32Column int32Column = 2;
  for (int i = 0; i < this->int32column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->int32column(i), target);
  }

  // repeated .fbquery.QueryResult.Int64Column int64Column = 3;
  for (int i = 0; i < this->int64column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->int64column(i), target);
  }

  // repeated .fbquery.QueryResult.UInt32Column uint32Column = 4;
  for (int i = 0; i < this->uint32column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->uint32column(i), target);
  }

  // repeated .fbquery.QueryResult.UInt64Column uint64Column = 5;
  for (int i = 0; i < this->uint64column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->uint64column(i), target);
  }

  // repeated .fbquery.QueryResult.StringColumn stringColumn = 6;
  for (int i = 0; i < this->stringcolumn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stringcolumn(i), target);
  }

  // repeated .fbquery.QueryResult.BytesColumn bytesColumn = 7;
  for (int i = 0; i < this->bytescolumn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->bytescolumn(i), target);
  }

  // repeated .fbquery.QueryResult.FloatColumn floatColumn = 8;
  for (int i = 0; i < this->floatcolumn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->floatcolumn(i), target);
  }

  // repeated .fbquery.QueryResult.DoubleColumn doubleColumn = 9;
  for (int i = 0; i < this->doublecolumn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->doublecolumn(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbquery.QueryResult)
  return target;
}

int QueryResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fbquery.QueryResult.InputParams params = 1;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  // repeated .fbquery.QueryResult.Int32Column int32Column = 2;
  total_size += 1 * this->int32column_size();
  for (int i = 0; i < this->int32column_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->int32column(i));
  }

  // repeated .fbquery.QueryResult.Int64Column int64Column = 3;
  total_size += 1 * this->int64column_size();
  for (int i = 0; i < this->int64column_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->int64column(i));
  }

  // repeated .fbquery.QueryResult.UInt32Column uint32Column = 4;
  total_size += 1 * this->uint32column_size();
  for (int i = 0; i < this->uint32column_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uint32column(i));
  }

  // repeated .fbquery.QueryResult.UInt64Column uint64Column = 5;
  total_size += 1 * this->uint64column_size();
  for (int i = 0; i < this->uint64column_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uint64column(i));
  }

  // repeated .fbquery.QueryResult.StringColumn stringColumn = 6;
  total_size += 1 * this->stringcolumn_size();
  for (int i = 0; i < this->stringcolumn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stringcolumn(i));
  }

  // repeated .fbquery.QueryResult.BytesColumn bytesColumn = 7;
  total_size += 1 * this->bytescolumn_size();
  for (int i = 0; i < this->bytescolumn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bytescolumn(i));
  }

  // repeated .fbquery.QueryResult.FloatColumn floatColumn = 8;
  total_size += 1 * this->floatcolumn_size();
  for (int i = 0; i < this->floatcolumn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->floatcolumn(i));
  }

  // repeated .fbquery.QueryResult.DoubleColumn doubleColumn = 9;
  total_size += 1 * this->doublecolumn_size();
  for (int i = 0; i < this->doublecolumn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->doublecolumn(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult::MergeFrom(const QueryResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  int32column_.MergeFrom(from.int32column_);
  int64column_.MergeFrom(from.int64column_);
  uint32column_.MergeFrom(from.uint32column_);
  uint64column_.MergeFrom(from.uint64column_);
  stringcolumn_.MergeFrom(from.stringcolumn_);
  bytescolumn_.MergeFrom(from.bytescolumn_);
  floatcolumn_.MergeFrom(from.floatcolumn_);
  doublecolumn_.MergeFrom(from.doublecolumn_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_params()) {
      mutable_params()->::fbquery::QueryResult_InputParams::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult::CopyFrom(const QueryResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult::IsInitialized() const {

  return true;
}

void QueryResult::Swap(QueryResult* other) {
  if (other != this) {
    std::swap(params_, other->params_);
    int32column_.Swap(&other->int32column_);
    int64column_.Swap(&other->int64column_);
    uint32column_.Swap(&other->uint32column_);
    uint64column_.Swap(&other->uint64column_);
    stringcolumn_.Swap(&other->stringcolumn_);
    bytescolumn_.Swap(&other->bytescolumn_);
    floatcolumn_.Swap(&other->floatcolumn_);
    doublecolumn_.Swap(&other->doublecolumn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_descriptor_;
  metadata.reflection = QueryResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinalResponse::kTargetFieldNumber;
const int FinalResponse::kRequestIDFieldNumber;
const int FinalResponse::kResultFieldNumber;
const int FinalResponse::kErrorFieldNumber;
const int FinalResponse::kRequestKeyFieldNumber;
const int FinalResponse::kFromCacheFieldNumber;
const int FinalResponse::kNumRespFieldNumber;
const int FinalResponse::kThisRespFieldNumber;
const int FinalResponse::kMissingMDSFieldNumber;
#endif  // !_MSC_VER

FinalResponse::FinalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbquery.FinalResponse)
}

void FinalResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::fbquery::QueryResult*>(&::fbquery::QueryResult::default_instance());
}

FinalResponse::FinalResponse(const FinalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbquery.FinalResponse)
}

void FinalResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = NULL;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromcache_ = false;
  numresp_ = 0;
  thisresp_ = 0;
  missingmds_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinalResponse::~FinalResponse() {
  // @@protoc_insertion_point(destructor:fbquery.FinalResponse)
  SharedDtor();
}

void FinalResponse::SharedDtor() {
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_;
  }
  if (requestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requestid_;
  }
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (requestkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requestkey_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void FinalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinalResponse_descriptor_;
}

const FinalResponse& FinalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbresult_2eproto();
  return *default_instance_;
}

FinalResponse* FinalResponse::default_instance_ = NULL;

FinalResponse* FinalResponse::New() const {
  return new FinalResponse;
}

void FinalResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FinalResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(numresp_, fromcache_);
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_->clear();
      }
    }
    if (has_requestid()) {
      if (requestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        requestid_->clear();
      }
    }
    if (has_result()) {
      if (result_ != NULL) result_->::fbquery::QueryResult::Clear();
    }
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
    if (has_requestkey()) {
      if (requestkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        requestkey_->clear();
      }
    }
    thisresp_ = 0;
  }
  missingmds_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbquery.FinalResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Target = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RequestID;
        break;
      }

      // required string RequestID = 2;
      case 2: {
        if (tag == 18) {
         parse_RequestID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requestid().data(), this->requestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requestid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Result;
        break;
      }

      // optional .fbquery.QueryResult Result = 3;
      case 3: {
        if (tag == 26) {
         parse_Result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Error;
        break;
      }

      // optional string Error = 4;
      case 4: {
        if (tag == 34) {
         parse_Error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RequestKey;
        break;
      }

      // optional string RequestKey = 5;
      case 5: {
        if (tag == 42) {
         parse_RequestKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requestkey().data(), this->requestkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requestkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_FromCache;
        break;
      }

      // optional bool FromCache = 6;
      case 6: {
        if (tag == 48) {
         parse_FromCache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromcache_)));
          set_has_fromcache();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_NumResp;
        break;
      }

      // optional int32 NumResp = 7;
      case 7: {
        if (tag == 56) {
         parse_NumResp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numresp_)));
          set_has_numresp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ThisResp;
        break;
      }

      // optional int32 ThisResp = 8;
      case 8: {
        if (tag == 64) {
         parse_ThisResp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thisresp_)));
          set_has_thisresp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_MissingMDS;
        break;
      }

      // optional bool MissingMDS = 9;
      case 9: {
        if (tag == 72) {
         parse_MissingMDS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &missingmds_)));
          set_has_missingmds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbquery.FinalResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbquery.FinalResponse)
  return false;
#undef DO_
}

void FinalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbquery.FinalResponse)
  // required string Target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->target(), output);
  }

  // required string RequestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requestid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->requestid(), output);
  }

  // optional .fbquery.QueryResult Result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  // optional string Error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error(), output);
  }

  // optional string RequestKey = 5;
  if (has_requestkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requestkey().data(), this->requestkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requestkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->requestkey(), output);
  }

  // optional bool FromCache = 6;
  if (has_fromcache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fromcache(), output);
  }

  // optional int32 NumResp = 7;
  if (has_numresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->numresp(), output);
  }

  // optional int32 ThisResp = 8;
  if (has_thisresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->thisresp(), output);
  }

  // optional bool MissingMDS = 9;
  if (has_missingmds()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->missingmds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbquery.FinalResponse)
}

::google::protobuf::uint8* FinalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbquery.FinalResponse)
  // required string Target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target(), target);
  }

  // required string RequestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requestid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requestid(), target);
  }

  // optional .fbquery.QueryResult Result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  // optional string Error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error(), target);
  }

  // optional string RequestKey = 5;
  if (has_requestkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requestkey().data(), this->requestkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requestkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->requestkey(), target);
  }

  // optional bool FromCache = 6;
  if (has_fromcache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fromcache(), target);
  }

  // optional int32 NumResp = 7;
  if (has_numresp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->numresp(), target);
  }

  // optional int32 ThisResp = 8;
  if (has_thisresp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->thisresp(), target);
  }

  // optional bool MissingMDS = 9;
  if (has_missingmds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->missingmds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbquery.FinalResponse)
  return target;
}

int FinalResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // required string RequestID = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestid());
    }

    // optional .fbquery.QueryResult Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional string Error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional string RequestKey = 5;
    if (has_requestkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestkey());
    }

    // optional bool FromCache = 6;
    if (has_fromcache()) {
      total_size += 1 + 1;
    }

    // optional int32 NumResp = 7;
    if (has_numresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numresp());
    }

    // optional int32 ThisResp = 8;
    if (has_thisresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thisresp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool MissingMDS = 9;
    if (has_missingmds()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinalResponse::MergeFrom(const FinalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_result()) {
      mutable_result()->::fbquery::QueryResult::MergeFrom(from.result());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_requestkey()) {
      set_requestkey(from.requestkey());
    }
    if (from.has_fromcache()) {
      set_fromcache(from.fromcache());
    }
    if (from.has_numresp()) {
      set_numresp(from.numresp());
    }
    if (from.has_thisresp()) {
      set_thisresp(from.thisresp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_missingmds()) {
      set_missingmds(from.missingmds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalResponse::CopyFrom(const FinalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FinalResponse::Swap(FinalResponse* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(requestid_, other->requestid_);
    std::swap(result_, other->result_);
    std::swap(error_, other->error_);
    std::swap(requestkey_, other->requestkey_);
    std::swap(fromcache_, other->fromcache_);
    std::swap(numresp_, other->numresp_);
    std::swap(thisresp_, other->thisresp_);
    std::swap(missingmds_, other->missingmds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinalResponse_descriptor_;
  metadata.reflection = FinalResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fbquery

// @@protoc_insertion_point(global_scope)
