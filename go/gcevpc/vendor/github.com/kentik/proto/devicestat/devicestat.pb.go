// Code generated by protoc-gen-go. DO NOT EDIT.
// source: devicestat/devicestat.proto

/*
Package devicestat is a generated protocol buffer package.

It is generated from these files:
	devicestat/devicestat.proto

It has these top-level messages:
	StatRequest
	StatReply
*/
package devicestat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatRequest struct {
	CompanyId        *int64  `protobuf:"varint,1,opt,name=company_id" json:"company_id,omitempty"`
	DeviceId         *int64  `protobuf:"varint,2,opt,name=device_id" json:"device_id,omitempty"`
	SnmpSeen         *int32  `protobuf:"varint,3,opt,name=snmp_seen" json:"snmp_seen,omitempty"`
	FlowType         *string `protobuf:"bytes,4,opt,name=flow_type" json:"flow_type,omitempty"`
	FpsPostCap       *int32  `protobuf:"varint,5,opt,name=fps_post_cap" json:"fps_post_cap,omitempty"`
	BgpRoutes        *int32  `protobuf:"varint,6,opt,name=bgp_routes" json:"bgp_routes,omitempty"`
	BgpUpdates       *int32  `protobuf:"varint,7,opt,name=bgp_updates" json:"bgp_updates,omitempty"`
	MaxSampleRate    *int32  `protobuf:"varint,8,opt,name=max_sample_rate" json:"max_sample_rate,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StatRequest) Reset()                    { *m = StatRequest{} }
func (m *StatRequest) String() string            { return proto.CompactTextString(m) }
func (*StatRequest) ProtoMessage()               {}
func (*StatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StatRequest) GetCompanyId() int64 {
	if m != nil && m.CompanyId != nil {
		return *m.CompanyId
	}
	return 0
}

func (m *StatRequest) GetDeviceId() int64 {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return 0
}

func (m *StatRequest) GetSnmpSeen() int32 {
	if m != nil && m.SnmpSeen != nil {
		return *m.SnmpSeen
	}
	return 0
}

func (m *StatRequest) GetFlowType() string {
	if m != nil && m.FlowType != nil {
		return *m.FlowType
	}
	return ""
}

func (m *StatRequest) GetFpsPostCap() int32 {
	if m != nil && m.FpsPostCap != nil {
		return *m.FpsPostCap
	}
	return 0
}

func (m *StatRequest) GetBgpRoutes() int32 {
	if m != nil && m.BgpRoutes != nil {
		return *m.BgpRoutes
	}
	return 0
}

func (m *StatRequest) GetBgpUpdates() int32 {
	if m != nil && m.BgpUpdates != nil {
		return *m.BgpUpdates
	}
	return 0
}

func (m *StatRequest) GetMaxSampleRate() int32 {
	if m != nil && m.MaxSampleRate != nil {
		return *m.MaxSampleRate
	}
	return 0
}

type StatReply struct {
	Status           *int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *StatReply) Reset()                    { *m = StatReply{} }
func (m *StatReply) String() string            { return proto.CompactTextString(m) }
func (*StatReply) ProtoMessage()               {}
func (*StatReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StatReply) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*StatRequest)(nil), "devicestat.StatRequest")
	proto.RegisterType((*StatReply)(nil), "devicestat.StatReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeviceStat service

type DeviceStatClient interface {
	SendStats(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error)
}

type deviceStatClient struct {
	cc *grpc.ClientConn
}

func NewDeviceStatClient(cc *grpc.ClientConn) DeviceStatClient {
	return &deviceStatClient{cc}
}

func (c *deviceStatClient) SendStats(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error) {
	out := new(StatReply)
	err := grpc.Invoke(ctx, "/devicestat.DeviceStat/SendStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceStat service

type DeviceStatServer interface {
	SendStats(context.Context, *StatRequest) (*StatReply, error)
}

func RegisterDeviceStatServer(s *grpc.Server, srv DeviceStatServer) {
	s.RegisterService(&_DeviceStat_serviceDesc, srv)
}

func _DeviceStat_SendStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceStatServer).SendStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicestat.DeviceStat/SendStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceStatServer).SendStats(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceStat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "devicestat.DeviceStat",
	HandlerType: (*DeviceStatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendStats",
			Handler:    _DeviceStat_SendStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "devicestat/devicestat.proto",
}

func init() { proto.RegisterFile("devicestat/devicestat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xd0, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0x07, 0xf0, 0x6f, 0xbf, 0x9a, 0x6a, 0xa6, 0xa2, 0x38, 0x2a, 0x5d, 0xec, 0x25, 0xe4, 0x94,
	0x53, 0x05, 0xef, 0xde, 0xbc, 0x79, 0xb3, 0x0f, 0xb0, 0xac, 0xc9, 0x54, 0x0a, 0x49, 0x76, 0xcc,
	0x4c, 0xd4, 0xbc, 0x96, 0x4f, 0x28, 0xbb, 0x45, 0x5a, 0xf0, 0x36, 0xfc, 0x66, 0x16, 0xfe, 0xff,
	0x85, 0x55, 0x43, 0x1f, 0xbb, 0x9a, 0x44, 0xbd, 0xde, 0x1f, 0xc6, 0x35, 0x0f, 0x41, 0x03, 0xc2,
	0x41, 0xca, 0x6f, 0x03, 0x8b, 0x8d, 0x7a, 0x7d, 0xa1, 0xf7, 0x91, 0x44, 0x11, 0x01, 0xea, 0xd0,
	0xb1, 0xef, 0x27, 0xb7, 0x6b, 0xac, 0x29, 0x4c, 0x35, 0xc3, 0x2b, 0xc8, 0xf7, 0x2f, 0x22, 0xfd,
	0xff, 0x25, 0xe9, 0x3b, 0x76, 0x42, 0xd4, 0xdb, 0x59, 0x61, 0xaa, 0x2c, 0xd2, 0xb6, 0x0d, 0x9f,
	0x4e, 0x27, 0x26, 0x7b, 0x52, 0x98, 0x2a, 0xc7, 0x1b, 0x38, 0xdf, 0xb2, 0x38, 0x0e, 0xa2, 0xae,
	0xf6, 0x6c, 0xb3, 0x74, 0x88, 0x00, 0xaf, 0x6f, 0xec, 0x86, 0x30, 0x2a, 0x89, 0x9d, 0x27, 0xbb,
	0x86, 0x45, 0xb4, 0x91, 0x1b, 0x1f, 0xf1, 0x34, 0xe1, 0x12, 0x2e, 0x3b, 0xff, 0xe5, 0xc4, 0x77,
	0xdc, 0x92, 0x1b, 0xbc, 0x92, 0x3d, 0x8b, 0x8b, 0x72, 0x05, 0xf9, 0x3e, 0x33, 0xb7, 0x13, 0x5e,
	0xc0, 0x3c, 0x36, 0x19, 0x25, 0xa5, 0xcd, 0x1e, 0x9e, 0x01, 0x9e, 0x52, 0xda, 0x78, 0x82, 0x8f,
	0x90, 0x6f, 0xa8, 0x6f, 0xe2, 0x2c, 0xb8, 0x5c, 0x1f, 0xfd, 0xc5, 0x51, 0xeb, 0xbb, 0xdb, 0xbf,
	0x0b, 0x6e, 0xa7, 0xf2, 0xdf, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0xff, 0x53, 0x6e, 0x48,
	0x01, 0x00, 0x00,
}
