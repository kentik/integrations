// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fbresult.proto

#ifndef PROTOBUF_fbresult_2eproto__INCLUDED
#define PROTOBUF_fbresult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fbquery {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fbresult_2eproto();
void protobuf_AssignDesc_fbresult_2eproto();
void protobuf_ShutdownFile_fbresult_2eproto();

class QueryResult;
class QueryResult_ColumnHeaderInfo;
class QueryResult_InputParams;
class QueryResult_Int32Column;
class QueryResult_Int64Column;
class QueryResult_UInt32Column;
class QueryResult_UInt64Column;
class QueryResult_StringColumn;
class QueryResult_BytesColumn;
class QueryResult_FloatColumn;
class QueryResult_DoubleColumn;
class FinalResponse;

// ===================================================================

class QueryResult_ColumnHeaderInfo : public ::google::protobuf::Message {
 public:
  QueryResult_ColumnHeaderInfo();
  virtual ~QueryResult_ColumnHeaderInfo();

  QueryResult_ColumnHeaderInfo(const QueryResult_ColumnHeaderInfo& from);

  inline QueryResult_ColumnHeaderInfo& operator=(const QueryResult_ColumnHeaderInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_ColumnHeaderInfo& default_instance();

  void Swap(QueryResult_ColumnHeaderInfo* other);

  // implements Message ----------------------------------------------

  QueryResult_ColumnHeaderInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_ColumnHeaderInfo& from);
  void MergeFrom(const QueryResult_ColumnHeaderInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional string format = 3;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 3;
  inline const ::std::string& format() const;
  inline void set_format(const ::std::string& value);
  inline void set_format(const char* value);
  inline void set_format(const char* value, size_t size);
  inline ::std::string* mutable_format();
  inline ::std::string* release_format();
  inline void set_allocated_format(::std::string* format);

  // optional string aggName = 4;
  inline bool has_aggname() const;
  inline void clear_aggname();
  static const int kAggNameFieldNumber = 4;
  inline const ::std::string& aggname() const;
  inline void set_aggname(const ::std::string& value);
  inline void set_aggname(const char* value);
  inline void set_aggname(const char* value, size_t size);
  inline ::std::string* mutable_aggname();
  inline ::std::string* release_aggname();
  inline void set_allocated_aggname(::std::string* aggname);

  // @@protoc_insertion_point(class_scope:fbquery.QueryResult.ColumnHeaderInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_aggname();
  inline void clear_has_aggname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* format_;
  ::std::string* aggname_;
  ::google::protobuf::int32 position_;
  friend void  protobuf_AddDesc_fbresult_2eproto();
  friend void protobuf_AssignDesc_fbresult_2eproto();
  friend void protobuf_ShutdownFile_fbresult_2eproto();

  void InitAsDefaultInstance();
  static QueryResult_ColumnHeaderInfo* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_InputParams : public ::google::protobuf::Message {
 public:
  QueryResult_InputParams();
  virtual ~QueryResult_InputParams();

  QueryResult_InputParams(const QueryResult_InputParams& from);

  inline QueryResult_InputParams& operator=(const QueryResult_InputParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_InputParams& default_instance();

  void Swap(QueryResult_InputParams* other);

  // implements Message ----------------------------------------------

  QueryResult_InputParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_InputParams& from);
  void MergeFrom(const QueryResult_InputParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string i_orderby = 1;
  inline bool has_i_orderby() const;
  inline void clear_i_orderby();
  static const int kIOrderbyFieldNumber = 1;
  inline const ::std::string& i_orderby() const;
  inline void set_i_orderby(const ::std::string& value);
  inline void set_i_orderby(const char* value);
  inline void set_i_orderby(const char* value, size_t size);
  inline ::std::string* mutable_i_orderby();
  inline ::std::string* release_i_orderby();
  inline void set_allocated_i_orderby(::std::string* i_orderby);

  // optional int32 i_offset = 2;
  inline bool has_i_offset() const;
  inline void clear_i_offset();
  static const int kIOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 i_offset() const;
  inline void set_i_offset(::google::protobuf::int32 value);

  // optional int32 i_limit = 3;
  inline bool has_i_limit() const;
  inline void clear_i_limit();
  static const int kILimitFieldNumber = 3;
  inline ::google::protobuf::int32 i_limit() const;
  inline void set_i_limit(::google::protobuf::int32 value);

  // optional int64 i_start_time = 4;
  inline bool has_i_start_time() const;
  inline void clear_i_start_time();
  static const int kIStartTimeFieldNumber = 4;
  inline ::google::protobuf::int64 i_start_time() const;
  inline void set_i_start_time(::google::protobuf::int64 value);

  // optional int64 i_end_time = 5;
  inline bool has_i_end_time() const;
  inline void clear_i_end_time();
  static const int kIEndTimeFieldNumber = 5;
  inline ::google::protobuf::int64 i_end_time() const;
  inline void set_i_end_time(::google::protobuf::int64 value);

  // optional string i_device_name = 6;
  inline bool has_i_device_name() const;
  inline void clear_i_device_name();
  static const int kIDeviceNameFieldNumber = 6;
  inline const ::std::string& i_device_name() const;
  inline void set_i_device_name(const ::std::string& value);
  inline void set_i_device_name(const char* value);
  inline void set_i_device_name(const char* value, size_t size);
  inline ::std::string* mutable_i_device_name();
  inline ::std::string* release_i_device_name();
  inline void set_allocated_i_device_name(::std::string* i_device_name);

  // optional int64 i_device_id = 7;
  inline bool has_i_device_id() const;
  inline void clear_i_device_id();
  static const int kIDeviceIdFieldNumber = 7;
  inline ::google::protobuf::int64 i_device_id() const;
  inline void set_i_device_id(::google::protobuf::int64 value);

  // optional int64 i_sq_start = 8;
  inline bool has_i_sq_start() const;
  inline void clear_i_sq_start();
  static const int kISqStartFieldNumber = 8;
  inline ::google::protobuf::int64 i_sq_start() const;
  inline void set_i_sq_start(::google::protobuf::int64 value);

  // optional int64 i_sq_end = 9;
  inline bool has_i_sq_end() const;
  inline void clear_i_sq_end();
  static const int kISqEndFieldNumber = 9;
  inline ::google::protobuf::int64 i_sq_end() const;
  inline void set_i_sq_end(::google::protobuf::int64 value);

  // optional int32 i_duration = 10;
  inline bool has_i_duration() const;
  inline void clear_i_duration();
  static const int kIDurationFieldNumber = 10;
  inline ::google::protobuf::int32 i_duration() const;
  inline void set_i_duration(::google::protobuf::int32 value);

  // optional string i_device_site_name = 11;
  inline bool has_i_device_site_name() const;
  inline void clear_i_device_site_name();
  static const int kIDeviceSiteNameFieldNumber = 11;
  inline const ::std::string& i_device_site_name() const;
  inline void set_i_device_site_name(const ::std::string& value);
  inline void set_i_device_site_name(const char* value);
  inline void set_i_device_site_name(const char* value, size_t size);
  inline ::std::string* mutable_i_device_site_name();
  inline ::std::string* release_i_device_site_name();
  inline void set_allocated_i_device_site_name(::std::string* i_device_site_name);

  // optional string i_device_type = 12;
  inline bool has_i_device_type() const;
  inline void clear_i_device_type();
  static const int kIDeviceTypeFieldNumber = 12;
  inline const ::std::string& i_device_type() const;
  inline void set_i_device_type(const ::std::string& value);
  inline void set_i_device_type(const char* value);
  inline void set_i_device_type(const char* value, size_t size);
  inline ::std::string* mutable_i_device_type();
  inline ::std::string* release_i_device_type();
  inline void set_allocated_i_device_type(::std::string* i_device_type);

  // optional string i_debug_info = 13;
  inline bool has_i_debug_info() const;
  inline void clear_i_debug_info();
  static const int kIDebugInfoFieldNumber = 13;
  inline const ::std::string& i_debug_info() const;
  inline void set_i_debug_info(const ::std::string& value);
  inline void set_i_debug_info(const char* value);
  inline void set_i_debug_info(const char* value, size_t size);
  inline ::std::string* mutable_i_debug_info();
  inline ::std::string* release_i_debug_info();
  inline void set_allocated_i_debug_info(::std::string* i_debug_info);

  // @@protoc_insertion_point(class_scope:fbquery.QueryResult.InputParams)
 private:
  inline void set_has_i_orderby();
  inline void clear_has_i_orderby();
  inline void set_has_i_offset();
  inline void clear_has_i_offset();
  inline void set_has_i_limit();
  inline void clear_has_i_limit();
  inline void set_has_i_start_time();
  inline void clear_has_i_start_time();
  inline void set_has_i_end_time();
  inline void clear_has_i_end_time();
  inline void set_has_i_device_name();
  inline void clear_has_i_device_name();
  inline void set_has_i_device_id();
  inline void clear_has_i_device_id();
  inline void set_has_i_sq_start();
  inline void clear_has_i_sq_start();
  inline void set_has_i_sq_end();
  inline void clear_has_i_sq_end();
  inline void set_has_i_duration();
  inline void clear_has_i_duration();
  inline void set_has_i_device_site_name();
  inline void clear_has_i_device_site_name();
  inline void set_has_i_device_type();
  inline void clear_has_i_device_type();
  inline void set_has_i_debug_info();
  inline void clear_has_i_debug_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* i_orderby_;
  ::google::protobuf::int32 i_offset_;
  ::google::protobuf::int32 i_limit_;
  ::google::protobuf::int64 i_start_time_;
  ::google::protobuf::int64 i_end_time_;
  ::std::string* i_device_name_;
  ::google::protobuf::int64 i_device_id_;
  ::google::protobuf::int64 i_sq_start_;
  ::google::protobuf::int64 i_sq_end_;
  ::std::string* i_device_site_name_;
  ::std::string* i_device_type_;
  ::std::string* i_debug_info_;
  ::google::protobuf::int32 i_duration_;
  friend void  protobuf_AddDesc_fbresult_2eproto();
  friend void protobuf_AssignDesc_fbresult_2eproto();
  friend void protobuf_ShutdownFile_fbresult_2eproto();

  void InitAsDefaultInstance();
  static QueryResult_InputParams* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_Int32Column : public ::google::protobuf::Message {
 public:
  QueryResult_Int32Column();
  virtual ~QueryResult_Int32Column();

  QueryResult_Int32Column(const QueryResult_Int32Column& from);

  inline QueryResult_Int32Column& operator=(const QueryResult_Int32Column& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_Int32Column& default_instance();

  void Swap(QueryResult_Int32Column* other);

  // implements Message ----------------------------------------------

  QueryResult_Int32Column* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_Int32Column& from);
  void MergeFrom(const QueryResult_Int32Column& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::fbquery::QueryResult_ColumnHeaderInfo& header() const;
  inline ::fbquery::QueryResult_ColumnHeaderInfo* mutable_header();
  inline ::fbquery::QueryResult_ColumnHeaderInfo* release_header();
  inline void set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header);

  // repeated int32 values = 2 [packed = true];
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline ::google::protobuf::int32 values(int index) const;
  inline void set_values(int index, ::google::protobuf::int32 value);
  inline void add_values(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:fbquery.QueryResult.Int32Column)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fbquery::QueryResult_ColumnHeaderInfo* header_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > values_;
  mutable int _values_cached_byte_size_;
  friend void  protobuf_AddDesc_fbresult_2eproto();
  friend void protobuf_AssignDesc_fbresult_2eproto();
  friend void protobuf_ShutdownFile_fbresult_2eproto();

  void InitAsDefaultInstance();
  static QueryResult_Int32Column* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_Int64Column : public ::google::protobuf::Message {
 public:
  QueryResult_Int64Column();
  virtual ~QueryResult_Int64Column();

  QueryResult_Int64Column(const QueryResult_Int64Column& from);

  inline QueryResult_Int64Column& operator=(const QueryResult_Int64Column& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_Int64Column& default_instance();

  void Swap(QueryResult_Int64Column* other);

  // implements Message ----------------------------------------------

  QueryResult_Int64Column* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_Int64Column& from);
  void MergeFrom(const QueryResult_Int64Column& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::fbquery::QueryResult_ColumnHeaderInfo& header() const;
  inline ::fbquery::QueryResult_ColumnHeaderInfo* mutable_header();
  inline ::fbquery::QueryResult_ColumnHeaderInfo* release_header();
  inline void set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header);

  // repeated int64 values = 2 [packed = true];
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline ::google::protobuf::int64 values(int index) const;
  inline void set_values(int index, ::google::protobuf::int64 value);
  inline void add_values(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:fbquery.QueryResult.Int64Column)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fbquery::QueryResult_ColumnHeaderInfo* header_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > values_;
  mutable int _values_cached_byte_size_;
  friend void  protobuf_AddDesc_fbresult_2eproto();
  friend void protobuf_AssignDesc_fbresult_2eproto();
  friend void protobuf_ShutdownFile_fbresult_2eproto();

  void InitAsDefaultInstance();
  static QueryResult_Int64Column* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_UInt32Column : public ::google::protobuf::Message {
 public:
  QueryResult_UInt32Column();
  virtual ~QueryResult_UInt32Column();

  QueryResult_UInt32Column(const QueryResult_UInt32Column& from);

  inline QueryResult_UInt32Column& operator=(const QueryResult_UInt32Column& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_UInt32Column& default_instance();

  void Swap(QueryResult_UInt32Column* other);

  // implements Message ----------------------------------------------

  QueryResult_UInt32Column* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_UInt32Column& from);
  void MergeFrom(const QueryResult_UInt32Column& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::fbquery::QueryResult_ColumnHeaderInfo& header() const;
  inline ::fbquery::QueryResult_ColumnHeaderInfo* mutable_header();
  inline ::fbquery::QueryResult_ColumnHeaderInfo* release_header();
  inline void set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header);

  // repeated uint32 values = 2 [packed = true];
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline ::google::protobuf::uint32 values(int index) const;
  inline void set_values(int index, ::google::protobuf::uint32 value);
  inline void add_values(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:fbquery.QueryResult.UInt32Column)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fbquery::QueryResult_ColumnHeaderInfo* header_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > values_;
  mutable int _values_cached_byte_size_;
  friend void  protobuf_AddDesc_fbresult_2eproto();
  friend void protobuf_AssignDesc_fbresult_2eproto();
  friend void protobuf_ShutdownFile_fbresult_2eproto();

  void InitAsDefaultInstance();
  static QueryResult_UInt32Column* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_UInt64Column : public ::google::protobuf::Message {
 public:
  QueryResult_UInt64Column();
  virtual ~QueryResult_UInt64Column();

  QueryResult_UInt64Column(const QueryResult_UInt64Column& from);

  inline QueryResult_UInt64Column& operator=(const QueryResult_UInt64Column& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_UInt64Column& default_instance();

  void Swap(QueryResult_UInt64Column* other);

  // implements Message ----------------------------------------------

  QueryResult_UInt64Column* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_UInt64Column& from);
  void MergeFrom(const QueryResult_UInt64Column& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::fbquery::QueryResult_ColumnHeaderInfo& header() const;
  inline ::fbquery::QueryResult_ColumnHeaderInfo* mutable_header();
  inline ::fbquery::QueryResult_ColumnHeaderInfo* release_header();
  inline void set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header);

  // repeated uint64 values = 2 [packed = true];
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline ::google::protobuf::uint64 values(int index) const;
  inline void set_values(int index, ::google::protobuf::uint64 value);
  inline void add_values(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:fbquery.QueryResult.UInt64Column)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fbquery::QueryResult_ColumnHeaderInfo* header_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > values_;
  mutable int _values_cached_byte_size_;
  friend void  protobuf_AddDesc_fbresult_2eproto();
  friend void protobuf_AssignDesc_fbresult_2eproto();
  friend void protobuf_ShutdownFile_fbresult_2eproto();

  void InitAsDefaultInstance();
  static QueryResult_UInt64Column* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_StringColumn : public ::google::protobuf::Message {
 public:
  QueryResult_StringColumn();
  virtual ~QueryResult_StringColumn();

  QueryResult_StringColumn(const QueryResult_StringColumn& from);

  inline QueryResult_StringColumn& operator=(const QueryResult_StringColumn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_StringColumn& default_instance();

  void Swap(QueryResult_StringColumn* other);

  // implements Message ----------------------------------------------

  QueryResult_StringColumn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_StringColumn& from);
  void MergeFrom(const QueryResult_StringColumn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::fbquery::QueryResult_ColumnHeaderInfo& header() const;
  inline ::fbquery::QueryResult_ColumnHeaderInfo* mutable_header();
  inline ::fbquery::QueryResult_ColumnHeaderInfo* release_header();
  inline void set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header);

  // repeated string values = 2;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline const ::std::string& values(int index) const;
  inline ::std::string* mutable_values(int index);
  inline void set_values(int index, const ::std::string& value);
  inline void set_values(int index, const char* value);
  inline void set_values(int index, const char* value, size_t size);
  inline ::std::string* add_values();
  inline void add_values(const ::std::string& value);
  inline void add_values(const char* value);
  inline void add_values(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:fbquery.QueryResult.StringColumn)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fbquery::QueryResult_ColumnHeaderInfo* header_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  friend void  protobuf_AddDesc_fbresult_2eproto();
  friend void protobuf_AssignDesc_fbresult_2eproto();
  friend void protobuf_ShutdownFile_fbresult_2eproto();

  void InitAsDefaultInstance();
  static QueryResult_StringColumn* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_BytesColumn : public ::google::protobuf::Message {
 public:
  QueryResult_BytesColumn();
  virtual ~QueryResult_BytesColumn();

  QueryResult_BytesColumn(const QueryResult_BytesColumn& from);

  inline QueryResult_BytesColumn& operator=(const QueryResult_BytesColumn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_BytesColumn& default_instance();

  void Swap(QueryResult_BytesColumn* other);

  // implements Message ----------------------------------------------

  QueryResult_BytesColumn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_BytesColumn& from);
  void MergeFrom(const QueryResult_BytesColumn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::fbquery::QueryResult_ColumnHeaderInfo& header() const;
  inline ::fbquery::QueryResult_ColumnHeaderInfo* mutable_header();
  inline ::fbquery::QueryResult_ColumnHeaderInfo* release_header();
  inline void set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header);

  // repeated bytes values = 2;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline const ::std::string& values(int index) const;
  inline ::std::string* mutable_values(int index);
  inline void set_values(int index, const ::std::string& value);
  inline void set_values(int index, const char* value);
  inline void set_values(int index, const void* value, size_t size);
  inline ::std::string* add_values();
  inline void add_values(const ::std::string& value);
  inline void add_values(const char* value);
  inline void add_values(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:fbquery.QueryResult.BytesColumn)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fbquery::QueryResult_ColumnHeaderInfo* header_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  friend void  protobuf_AddDesc_fbresult_2eproto();
  friend void protobuf_AssignDesc_fbresult_2eproto();
  friend void protobuf_ShutdownFile_fbresult_2eproto();

  void InitAsDefaultInstance();
  static QueryResult_BytesColumn* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_FloatColumn : public ::google::protobuf::Message {
 public:
  QueryResult_FloatColumn();
  virtual ~QueryResult_FloatColumn();

  QueryResult_FloatColumn(const QueryResult_FloatColumn& from);

  inline QueryResult_FloatColumn& operator=(const QueryResult_FloatColumn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_FloatColumn& default_instance();

  void Swap(QueryResult_FloatColumn* other);

  // implements Message ----------------------------------------------

  QueryResult_FloatColumn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_FloatColumn& from);
  void MergeFrom(const QueryResult_FloatColumn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::fbquery::QueryResult_ColumnHeaderInfo& header() const;
  inline ::fbquery::QueryResult_ColumnHeaderInfo* mutable_header();
  inline ::fbquery::QueryResult_ColumnHeaderInfo* release_header();
  inline void set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header);

  // repeated float values = 2 [packed = true];
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline float values(int index) const;
  inline void set_values(int index, float value);
  inline void add_values(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      values() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:fbquery.QueryResult.FloatColumn)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fbquery::QueryResult_ColumnHeaderInfo* header_;
  ::google::protobuf::RepeatedField< float > values_;
  mutable int _values_cached_byte_size_;
  friend void  protobuf_AddDesc_fbresult_2eproto();
  friend void protobuf_AssignDesc_fbresult_2eproto();
  friend void protobuf_ShutdownFile_fbresult_2eproto();

  void InitAsDefaultInstance();
  static QueryResult_FloatColumn* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_DoubleColumn : public ::google::protobuf::Message {
 public:
  QueryResult_DoubleColumn();
  virtual ~QueryResult_DoubleColumn();

  QueryResult_DoubleColumn(const QueryResult_DoubleColumn& from);

  inline QueryResult_DoubleColumn& operator=(const QueryResult_DoubleColumn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_DoubleColumn& default_instance();

  void Swap(QueryResult_DoubleColumn* other);

  // implements Message ----------------------------------------------

  QueryResult_DoubleColumn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_DoubleColumn& from);
  void MergeFrom(const QueryResult_DoubleColumn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::fbquery::QueryResult_ColumnHeaderInfo& header() const;
  inline ::fbquery::QueryResult_ColumnHeaderInfo* mutable_header();
  inline ::fbquery::QueryResult_ColumnHeaderInfo* release_header();
  inline void set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header);

  // repeated double values = 2 [packed = true];
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline double values(int index) const;
  inline void set_values(int index, double value);
  inline void add_values(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      values() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:fbquery.QueryResult.DoubleColumn)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fbquery::QueryResult_ColumnHeaderInfo* header_;
  ::google::protobuf::RepeatedField< double > values_;
  mutable int _values_cached_byte_size_;
  friend void  protobuf_AddDesc_fbresult_2eproto();
  friend void protobuf_AssignDesc_fbresult_2eproto();
  friend void protobuf_ShutdownFile_fbresult_2eproto();

  void InitAsDefaultInstance();
  static QueryResult_DoubleColumn* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult : public ::google::protobuf::Message {
 public:
  QueryResult();
  virtual ~QueryResult();

  QueryResult(const QueryResult& from);

  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult& default_instance();

  void Swap(QueryResult* other);

  // implements Message ----------------------------------------------

  QueryResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult& from);
  void MergeFrom(const QueryResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef QueryResult_ColumnHeaderInfo ColumnHeaderInfo;
  typedef QueryResult_InputParams InputParams;
  typedef QueryResult_Int32Column Int32Column;
  typedef QueryResult_Int64Column Int64Column;
  typedef QueryResult_UInt32Column UInt32Column;
  typedef QueryResult_UInt64Column UInt64Column;
  typedef QueryResult_StringColumn StringColumn;
  typedef QueryResult_BytesColumn BytesColumn;
  typedef QueryResult_FloatColumn FloatColumn;
  typedef QueryResult_DoubleColumn DoubleColumn;

  // accessors -------------------------------------------------------

  // optional .fbquery.QueryResult.InputParams params = 1;
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 1;
  inline const ::fbquery::QueryResult_InputParams& params() const;
  inline ::fbquery::QueryResult_InputParams* mutable_params();
  inline ::fbquery::QueryResult_InputParams* release_params();
  inline void set_allocated_params(::fbquery::QueryResult_InputParams* params);

  // repeated .fbquery.QueryResult.Int32Column int32Column = 2;
  inline int int32column_size() const;
  inline void clear_int32column();
  static const int kInt32ColumnFieldNumber = 2;
  inline const ::fbquery::QueryResult_Int32Column& int32column(int index) const;
  inline ::fbquery::QueryResult_Int32Column* mutable_int32column(int index);
  inline ::fbquery::QueryResult_Int32Column* add_int32column();
  inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_Int32Column >&
      int32column() const;
  inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_Int32Column >*
      mutable_int32column();

  // repeated .fbquery.QueryResult.Int64Column int64Column = 3;
  inline int int64column_size() const;
  inline void clear_int64column();
  static const int kInt64ColumnFieldNumber = 3;
  inline const ::fbquery::QueryResult_Int64Column& int64column(int index) const;
  inline ::fbquery::QueryResult_Int64Column* mutable_int64column(int index);
  inline ::fbquery::QueryResult_Int64Column* add_int64column();
  inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_Int64Column >&
      int64column() const;
  inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_Int64Column >*
      mutable_int64column();

  // repeated .fbquery.QueryResult.UInt32Column uint32Column = 4;
  inline int uint32column_size() const;
  inline void clear_uint32column();
  static const int kUint32ColumnFieldNumber = 4;
  inline const ::fbquery::QueryResult_UInt32Column& uint32column(int index) const;
  inline ::fbquery::QueryResult_UInt32Column* mutable_uint32column(int index);
  inline ::fbquery::QueryResult_UInt32Column* add_uint32column();
  inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_UInt32Column >&
      uint32column() const;
  inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_UInt32Column >*
      mutable_uint32column();

  // repeated .fbquery.QueryResult.UInt64Column uint64Column = 5;
  inline int uint64column_size() const;
  inline void clear_uint64column();
  static const int kUint64ColumnFieldNumber = 5;
  inline const ::fbquery::QueryResult_UInt64Column& uint64column(int index) const;
  inline ::fbquery::QueryResult_UInt64Column* mutable_uint64column(int index);
  inline ::fbquery::QueryResult_UInt64Column* add_uint64column();
  inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_UInt64Column >&
      uint64column() const;
  inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_UInt64Column >*
      mutable_uint64column();

  // repeated .fbquery.QueryResult.StringColumn stringColumn = 6;
  inline int stringcolumn_size() const;
  inline void clear_stringcolumn();
  static const int kStringColumnFieldNumber = 6;
  inline const ::fbquery::QueryResult_StringColumn& stringcolumn(int index) const;
  inline ::fbquery::QueryResult_StringColumn* mutable_stringcolumn(int index);
  inline ::fbquery::QueryResult_StringColumn* add_stringcolumn();
  inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_StringColumn >&
      stringcolumn() const;
  inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_StringColumn >*
      mutable_stringcolumn();

  // repeated .fbquery.QueryResult.BytesColumn bytesColumn = 7;
  inline int bytescolumn_size() const;
  inline void clear_bytescolumn();
  static const int kBytesColumnFieldNumber = 7;
  inline const ::fbquery::QueryResult_BytesColumn& bytescolumn(int index) const;
  inline ::fbquery::QueryResult_BytesColumn* mutable_bytescolumn(int index);
  inline ::fbquery::QueryResult_BytesColumn* add_bytescolumn();
  inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_BytesColumn >&
      bytescolumn() const;
  inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_BytesColumn >*
      mutable_bytescolumn();

  // repeated .fbquery.QueryResult.FloatColumn floatColumn = 8;
  inline int floatcolumn_size() const;
  inline void clear_floatcolumn();
  static const int kFloatColumnFieldNumber = 8;
  inline const ::fbquery::QueryResult_FloatColumn& floatcolumn(int index) const;
  inline ::fbquery::QueryResult_FloatColumn* mutable_floatcolumn(int index);
  inline ::fbquery::QueryResult_FloatColumn* add_floatcolumn();
  inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_FloatColumn >&
      floatcolumn() const;
  inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_FloatColumn >*
      mutable_floatcolumn();

  // repeated .fbquery.QueryResult.DoubleColumn doubleColumn = 9;
  inline int doublecolumn_size() const;
  inline void clear_doublecolumn();
  static const int kDoubleColumnFieldNumber = 9;
  inline const ::fbquery::QueryResult_DoubleColumn& doublecolumn(int index) const;
  inline ::fbquery::QueryResult_DoubleColumn* mutable_doublecolumn(int index);
  inline ::fbquery::QueryResult_DoubleColumn* add_doublecolumn();
  inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_DoubleColumn >&
      doublecolumn() const;
  inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_DoubleColumn >*
      mutable_doublecolumn();

  // @@protoc_insertion_point(class_scope:fbquery.QueryResult)
 private:
  inline void set_has_params();
  inline void clear_has_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fbquery::QueryResult_InputParams* params_;
  ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_Int32Column > int32column_;
  ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_Int64Column > int64column_;
  ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_UInt32Column > uint32column_;
  ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_UInt64Column > uint64column_;
  ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_StringColumn > stringcolumn_;
  ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_BytesColumn > bytescolumn_;
  ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_FloatColumn > floatcolumn_;
  ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_DoubleColumn > doublecolumn_;
  friend void  protobuf_AddDesc_fbresult_2eproto();
  friend void protobuf_AssignDesc_fbresult_2eproto();
  friend void protobuf_ShutdownFile_fbresult_2eproto();

  void InitAsDefaultInstance();
  static QueryResult* default_instance_;
};
// -------------------------------------------------------------------

class FinalResponse : public ::google::protobuf::Message {
 public:
  FinalResponse();
  virtual ~FinalResponse();

  FinalResponse(const FinalResponse& from);

  inline FinalResponse& operator=(const FinalResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FinalResponse& default_instance();

  void Swap(FinalResponse* other);

  // implements Message ----------------------------------------------

  FinalResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FinalResponse& from);
  void MergeFrom(const FinalResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Target = 1;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 1;
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const char* value, size_t size);
  inline ::std::string* mutable_target();
  inline ::std::string* release_target();
  inline void set_allocated_target(::std::string* target);

  // required string RequestID = 2;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestIDFieldNumber = 2;
  inline const ::std::string& requestid() const;
  inline void set_requestid(const ::std::string& value);
  inline void set_requestid(const char* value);
  inline void set_requestid(const char* value, size_t size);
  inline ::std::string* mutable_requestid();
  inline ::std::string* release_requestid();
  inline void set_allocated_requestid(::std::string* requestid);

  // optional .fbquery.QueryResult Result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::fbquery::QueryResult& result() const;
  inline ::fbquery::QueryResult* mutable_result();
  inline ::fbquery::QueryResult* release_result();
  inline void set_allocated_result(::fbquery::QueryResult* result);

  // optional string Error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  inline void set_allocated_error(::std::string* error);

  // optional string RequestKey = 5;
  inline bool has_requestkey() const;
  inline void clear_requestkey();
  static const int kRequestKeyFieldNumber = 5;
  inline const ::std::string& requestkey() const;
  inline void set_requestkey(const ::std::string& value);
  inline void set_requestkey(const char* value);
  inline void set_requestkey(const char* value, size_t size);
  inline ::std::string* mutable_requestkey();
  inline ::std::string* release_requestkey();
  inline void set_allocated_requestkey(::std::string* requestkey);

  // optional bool FromCache = 6;
  inline bool has_fromcache() const;
  inline void clear_fromcache();
  static const int kFromCacheFieldNumber = 6;
  inline bool fromcache() const;
  inline void set_fromcache(bool value);

  // optional int32 NumResp = 7;
  inline bool has_numresp() const;
  inline void clear_numresp();
  static const int kNumRespFieldNumber = 7;
  inline ::google::protobuf::int32 numresp() const;
  inline void set_numresp(::google::protobuf::int32 value);

  // optional int32 ThisResp = 8;
  inline bool has_thisresp() const;
  inline void clear_thisresp();
  static const int kThisRespFieldNumber = 8;
  inline ::google::protobuf::int32 thisresp() const;
  inline void set_thisresp(::google::protobuf::int32 value);

  // optional bool MissingMDS = 9;
  inline bool has_missingmds() const;
  inline void clear_missingmds();
  static const int kMissingMDSFieldNumber = 9;
  inline bool missingmds() const;
  inline void set_missingmds(bool value);

  // @@protoc_insertion_point(class_scope:fbquery.FinalResponse)
 private:
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_requestkey();
  inline void clear_has_requestkey();
  inline void set_has_fromcache();
  inline void clear_has_fromcache();
  inline void set_has_numresp();
  inline void clear_has_numresp();
  inline void set_has_thisresp();
  inline void clear_has_thisresp();
  inline void set_has_missingmds();
  inline void clear_has_missingmds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* target_;
  ::std::string* requestid_;
  ::fbquery::QueryResult* result_;
  ::std::string* error_;
  ::std::string* requestkey_;
  ::google::protobuf::int32 numresp_;
  bool fromcache_;
  bool missingmds_;
  ::google::protobuf::int32 thisresp_;
  friend void  protobuf_AddDesc_fbresult_2eproto();
  friend void protobuf_AssignDesc_fbresult_2eproto();
  friend void protobuf_ShutdownFile_fbresult_2eproto();

  void InitAsDefaultInstance();
  static FinalResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// QueryResult_ColumnHeaderInfo

// optional string name = 1;
inline bool QueryResult_ColumnHeaderInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_ColumnHeaderInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_ColumnHeaderInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_ColumnHeaderInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& QueryResult_ColumnHeaderInfo::name() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.ColumnHeaderInfo.name)
  return *name_;
}
inline void QueryResult_ColumnHeaderInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.ColumnHeaderInfo.name)
}
inline void QueryResult_ColumnHeaderInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbquery.QueryResult.ColumnHeaderInfo.name)
}
inline void QueryResult_ColumnHeaderInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbquery.QueryResult.ColumnHeaderInfo.name)
}
inline ::std::string* QueryResult_ColumnHeaderInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.ColumnHeaderInfo.name)
  return name_;
}
inline ::std::string* QueryResult_ColumnHeaderInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryResult_ColumnHeaderInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.ColumnHeaderInfo.name)
}

// optional int32 position = 2;
inline bool QueryResult_ColumnHeaderInfo::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryResult_ColumnHeaderInfo::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryResult_ColumnHeaderInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryResult_ColumnHeaderInfo::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 QueryResult_ColumnHeaderInfo::position() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.ColumnHeaderInfo.position)
  return position_;
}
inline void QueryResult_ColumnHeaderInfo::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.ColumnHeaderInfo.position)
}

// optional string format = 3;
inline bool QueryResult_ColumnHeaderInfo::has_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryResult_ColumnHeaderInfo::set_has_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryResult_ColumnHeaderInfo::clear_has_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryResult_ColumnHeaderInfo::clear_format() {
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_->clear();
  }
  clear_has_format();
}
inline const ::std::string& QueryResult_ColumnHeaderInfo::format() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.ColumnHeaderInfo.format)
  return *format_;
}
inline void QueryResult_ColumnHeaderInfo::set_format(const ::std::string& value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(value);
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.ColumnHeaderInfo.format)
}
inline void QueryResult_ColumnHeaderInfo::set_format(const char* value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbquery.QueryResult.ColumnHeaderInfo.format)
}
inline void QueryResult_ColumnHeaderInfo::set_format(const char* value, size_t size) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbquery.QueryResult.ColumnHeaderInfo.format)
}
inline ::std::string* QueryResult_ColumnHeaderInfo::mutable_format() {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.ColumnHeaderInfo.format)
  return format_;
}
inline ::std::string* QueryResult_ColumnHeaderInfo::release_format() {
  clear_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = format_;
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryResult_ColumnHeaderInfo::set_allocated_format(::std::string* format) {
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_;
  }
  if (format) {
    set_has_format();
    format_ = format;
  } else {
    clear_has_format();
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.ColumnHeaderInfo.format)
}

// optional string aggName = 4;
inline bool QueryResult_ColumnHeaderInfo::has_aggname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryResult_ColumnHeaderInfo::set_has_aggname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryResult_ColumnHeaderInfo::clear_has_aggname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryResult_ColumnHeaderInfo::clear_aggname() {
  if (aggname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aggname_->clear();
  }
  clear_has_aggname();
}
inline const ::std::string& QueryResult_ColumnHeaderInfo::aggname() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.ColumnHeaderInfo.aggName)
  return *aggname_;
}
inline void QueryResult_ColumnHeaderInfo::set_aggname(const ::std::string& value) {
  set_has_aggname();
  if (aggname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aggname_ = new ::std::string;
  }
  aggname_->assign(value);
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.ColumnHeaderInfo.aggName)
}
inline void QueryResult_ColumnHeaderInfo::set_aggname(const char* value) {
  set_has_aggname();
  if (aggname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aggname_ = new ::std::string;
  }
  aggname_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbquery.QueryResult.ColumnHeaderInfo.aggName)
}
inline void QueryResult_ColumnHeaderInfo::set_aggname(const char* value, size_t size) {
  set_has_aggname();
  if (aggname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aggname_ = new ::std::string;
  }
  aggname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbquery.QueryResult.ColumnHeaderInfo.aggName)
}
inline ::std::string* QueryResult_ColumnHeaderInfo::mutable_aggname() {
  set_has_aggname();
  if (aggname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aggname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.ColumnHeaderInfo.aggName)
  return aggname_;
}
inline ::std::string* QueryResult_ColumnHeaderInfo::release_aggname() {
  clear_has_aggname();
  if (aggname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = aggname_;
    aggname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryResult_ColumnHeaderInfo::set_allocated_aggname(::std::string* aggname) {
  if (aggname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete aggname_;
  }
  if (aggname) {
    set_has_aggname();
    aggname_ = aggname;
  } else {
    clear_has_aggname();
    aggname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.ColumnHeaderInfo.aggName)
}

// -------------------------------------------------------------------

// QueryResult_InputParams

// optional string i_orderby = 1;
inline bool QueryResult_InputParams::has_i_orderby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_InputParams::set_has_i_orderby() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_InputParams::clear_has_i_orderby() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_InputParams::clear_i_orderby() {
  if (i_orderby_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_orderby_->clear();
  }
  clear_has_i_orderby();
}
inline const ::std::string& QueryResult_InputParams::i_orderby() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.InputParams.i_orderby)
  return *i_orderby_;
}
inline void QueryResult_InputParams::set_i_orderby(const ::std::string& value) {
  set_has_i_orderby();
  if (i_orderby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_orderby_ = new ::std::string;
  }
  i_orderby_->assign(value);
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.InputParams.i_orderby)
}
inline void QueryResult_InputParams::set_i_orderby(const char* value) {
  set_has_i_orderby();
  if (i_orderby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_orderby_ = new ::std::string;
  }
  i_orderby_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbquery.QueryResult.InputParams.i_orderby)
}
inline void QueryResult_InputParams::set_i_orderby(const char* value, size_t size) {
  set_has_i_orderby();
  if (i_orderby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_orderby_ = new ::std::string;
  }
  i_orderby_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbquery.QueryResult.InputParams.i_orderby)
}
inline ::std::string* QueryResult_InputParams::mutable_i_orderby() {
  set_has_i_orderby();
  if (i_orderby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_orderby_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.InputParams.i_orderby)
  return i_orderby_;
}
inline ::std::string* QueryResult_InputParams::release_i_orderby() {
  clear_has_i_orderby();
  if (i_orderby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = i_orderby_;
    i_orderby_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryResult_InputParams::set_allocated_i_orderby(::std::string* i_orderby) {
  if (i_orderby_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete i_orderby_;
  }
  if (i_orderby) {
    set_has_i_orderby();
    i_orderby_ = i_orderby;
  } else {
    clear_has_i_orderby();
    i_orderby_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.InputParams.i_orderby)
}

// optional int32 i_offset = 2;
inline bool QueryResult_InputParams::has_i_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryResult_InputParams::set_has_i_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryResult_InputParams::clear_has_i_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryResult_InputParams::clear_i_offset() {
  i_offset_ = 0;
  clear_has_i_offset();
}
inline ::google::protobuf::int32 QueryResult_InputParams::i_offset() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.InputParams.i_offset)
  return i_offset_;
}
inline void QueryResult_InputParams::set_i_offset(::google::protobuf::int32 value) {
  set_has_i_offset();
  i_offset_ = value;
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.InputParams.i_offset)
}

// optional int32 i_limit = 3;
inline bool QueryResult_InputParams::has_i_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryResult_InputParams::set_has_i_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryResult_InputParams::clear_has_i_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryResult_InputParams::clear_i_limit() {
  i_limit_ = 0;
  clear_has_i_limit();
}
inline ::google::protobuf::int32 QueryResult_InputParams::i_limit() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.InputParams.i_limit)
  return i_limit_;
}
inline void QueryResult_InputParams::set_i_limit(::google::protobuf::int32 value) {
  set_has_i_limit();
  i_limit_ = value;
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.InputParams.i_limit)
}

// optional int64 i_start_time = 4;
inline bool QueryResult_InputParams::has_i_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryResult_InputParams::set_has_i_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryResult_InputParams::clear_has_i_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryResult_InputParams::clear_i_start_time() {
  i_start_time_ = GOOGLE_LONGLONG(0);
  clear_has_i_start_time();
}
inline ::google::protobuf::int64 QueryResult_InputParams::i_start_time() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.InputParams.i_start_time)
  return i_start_time_;
}
inline void QueryResult_InputParams::set_i_start_time(::google::protobuf::int64 value) {
  set_has_i_start_time();
  i_start_time_ = value;
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.InputParams.i_start_time)
}

// optional int64 i_end_time = 5;
inline bool QueryResult_InputParams::has_i_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryResult_InputParams::set_has_i_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryResult_InputParams::clear_has_i_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryResult_InputParams::clear_i_end_time() {
  i_end_time_ = GOOGLE_LONGLONG(0);
  clear_has_i_end_time();
}
inline ::google::protobuf::int64 QueryResult_InputParams::i_end_time() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.InputParams.i_end_time)
  return i_end_time_;
}
inline void QueryResult_InputParams::set_i_end_time(::google::protobuf::int64 value) {
  set_has_i_end_time();
  i_end_time_ = value;
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.InputParams.i_end_time)
}

// optional string i_device_name = 6;
inline bool QueryResult_InputParams::has_i_device_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryResult_InputParams::set_has_i_device_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryResult_InputParams::clear_has_i_device_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryResult_InputParams::clear_i_device_name() {
  if (i_device_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_name_->clear();
  }
  clear_has_i_device_name();
}
inline const ::std::string& QueryResult_InputParams::i_device_name() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.InputParams.i_device_name)
  return *i_device_name_;
}
inline void QueryResult_InputParams::set_i_device_name(const ::std::string& value) {
  set_has_i_device_name();
  if (i_device_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_name_ = new ::std::string;
  }
  i_device_name_->assign(value);
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.InputParams.i_device_name)
}
inline void QueryResult_InputParams::set_i_device_name(const char* value) {
  set_has_i_device_name();
  if (i_device_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_name_ = new ::std::string;
  }
  i_device_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbquery.QueryResult.InputParams.i_device_name)
}
inline void QueryResult_InputParams::set_i_device_name(const char* value, size_t size) {
  set_has_i_device_name();
  if (i_device_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_name_ = new ::std::string;
  }
  i_device_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbquery.QueryResult.InputParams.i_device_name)
}
inline ::std::string* QueryResult_InputParams::mutable_i_device_name() {
  set_has_i_device_name();
  if (i_device_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.InputParams.i_device_name)
  return i_device_name_;
}
inline ::std::string* QueryResult_InputParams::release_i_device_name() {
  clear_has_i_device_name();
  if (i_device_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = i_device_name_;
    i_device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryResult_InputParams::set_allocated_i_device_name(::std::string* i_device_name) {
  if (i_device_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete i_device_name_;
  }
  if (i_device_name) {
    set_has_i_device_name();
    i_device_name_ = i_device_name;
  } else {
    clear_has_i_device_name();
    i_device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.InputParams.i_device_name)
}

// optional int64 i_device_id = 7;
inline bool QueryResult_InputParams::has_i_device_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryResult_InputParams::set_has_i_device_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryResult_InputParams::clear_has_i_device_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryResult_InputParams::clear_i_device_id() {
  i_device_id_ = GOOGLE_LONGLONG(0);
  clear_has_i_device_id();
}
inline ::google::protobuf::int64 QueryResult_InputParams::i_device_id() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.InputParams.i_device_id)
  return i_device_id_;
}
inline void QueryResult_InputParams::set_i_device_id(::google::protobuf::int64 value) {
  set_has_i_device_id();
  i_device_id_ = value;
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.InputParams.i_device_id)
}

// optional int64 i_sq_start = 8;
inline bool QueryResult_InputParams::has_i_sq_start() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QueryResult_InputParams::set_has_i_sq_start() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QueryResult_InputParams::clear_has_i_sq_start() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QueryResult_InputParams::clear_i_sq_start() {
  i_sq_start_ = GOOGLE_LONGLONG(0);
  clear_has_i_sq_start();
}
inline ::google::protobuf::int64 QueryResult_InputParams::i_sq_start() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.InputParams.i_sq_start)
  return i_sq_start_;
}
inline void QueryResult_InputParams::set_i_sq_start(::google::protobuf::int64 value) {
  set_has_i_sq_start();
  i_sq_start_ = value;
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.InputParams.i_sq_start)
}

// optional int64 i_sq_end = 9;
inline bool QueryResult_InputParams::has_i_sq_end() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QueryResult_InputParams::set_has_i_sq_end() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QueryResult_InputParams::clear_has_i_sq_end() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QueryResult_InputParams::clear_i_sq_end() {
  i_sq_end_ = GOOGLE_LONGLONG(0);
  clear_has_i_sq_end();
}
inline ::google::protobuf::int64 QueryResult_InputParams::i_sq_end() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.InputParams.i_sq_end)
  return i_sq_end_;
}
inline void QueryResult_InputParams::set_i_sq_end(::google::protobuf::int64 value) {
  set_has_i_sq_end();
  i_sq_end_ = value;
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.InputParams.i_sq_end)
}

// optional int32 i_duration = 10;
inline bool QueryResult_InputParams::has_i_duration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QueryResult_InputParams::set_has_i_duration() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QueryResult_InputParams::clear_has_i_duration() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QueryResult_InputParams::clear_i_duration() {
  i_duration_ = 0;
  clear_has_i_duration();
}
inline ::google::protobuf::int32 QueryResult_InputParams::i_duration() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.InputParams.i_duration)
  return i_duration_;
}
inline void QueryResult_InputParams::set_i_duration(::google::protobuf::int32 value) {
  set_has_i_duration();
  i_duration_ = value;
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.InputParams.i_duration)
}

// optional string i_device_site_name = 11;
inline bool QueryResult_InputParams::has_i_device_site_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QueryResult_InputParams::set_has_i_device_site_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void QueryResult_InputParams::clear_has_i_device_site_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void QueryResult_InputParams::clear_i_device_site_name() {
  if (i_device_site_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_site_name_->clear();
  }
  clear_has_i_device_site_name();
}
inline const ::std::string& QueryResult_InputParams::i_device_site_name() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.InputParams.i_device_site_name)
  return *i_device_site_name_;
}
inline void QueryResult_InputParams::set_i_device_site_name(const ::std::string& value) {
  set_has_i_device_site_name();
  if (i_device_site_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_site_name_ = new ::std::string;
  }
  i_device_site_name_->assign(value);
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.InputParams.i_device_site_name)
}
inline void QueryResult_InputParams::set_i_device_site_name(const char* value) {
  set_has_i_device_site_name();
  if (i_device_site_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_site_name_ = new ::std::string;
  }
  i_device_site_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbquery.QueryResult.InputParams.i_device_site_name)
}
inline void QueryResult_InputParams::set_i_device_site_name(const char* value, size_t size) {
  set_has_i_device_site_name();
  if (i_device_site_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_site_name_ = new ::std::string;
  }
  i_device_site_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbquery.QueryResult.InputParams.i_device_site_name)
}
inline ::std::string* QueryResult_InputParams::mutable_i_device_site_name() {
  set_has_i_device_site_name();
  if (i_device_site_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_site_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.InputParams.i_device_site_name)
  return i_device_site_name_;
}
inline ::std::string* QueryResult_InputParams::release_i_device_site_name() {
  clear_has_i_device_site_name();
  if (i_device_site_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = i_device_site_name_;
    i_device_site_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryResult_InputParams::set_allocated_i_device_site_name(::std::string* i_device_site_name) {
  if (i_device_site_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete i_device_site_name_;
  }
  if (i_device_site_name) {
    set_has_i_device_site_name();
    i_device_site_name_ = i_device_site_name;
  } else {
    clear_has_i_device_site_name();
    i_device_site_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.InputParams.i_device_site_name)
}

// optional string i_device_type = 12;
inline bool QueryResult_InputParams::has_i_device_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QueryResult_InputParams::set_has_i_device_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void QueryResult_InputParams::clear_has_i_device_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void QueryResult_InputParams::clear_i_device_type() {
  if (i_device_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_type_->clear();
  }
  clear_has_i_device_type();
}
inline const ::std::string& QueryResult_InputParams::i_device_type() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.InputParams.i_device_type)
  return *i_device_type_;
}
inline void QueryResult_InputParams::set_i_device_type(const ::std::string& value) {
  set_has_i_device_type();
  if (i_device_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_type_ = new ::std::string;
  }
  i_device_type_->assign(value);
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.InputParams.i_device_type)
}
inline void QueryResult_InputParams::set_i_device_type(const char* value) {
  set_has_i_device_type();
  if (i_device_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_type_ = new ::std::string;
  }
  i_device_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbquery.QueryResult.InputParams.i_device_type)
}
inline void QueryResult_InputParams::set_i_device_type(const char* value, size_t size) {
  set_has_i_device_type();
  if (i_device_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_type_ = new ::std::string;
  }
  i_device_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbquery.QueryResult.InputParams.i_device_type)
}
inline ::std::string* QueryResult_InputParams::mutable_i_device_type() {
  set_has_i_device_type();
  if (i_device_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_device_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.InputParams.i_device_type)
  return i_device_type_;
}
inline ::std::string* QueryResult_InputParams::release_i_device_type() {
  clear_has_i_device_type();
  if (i_device_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = i_device_type_;
    i_device_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryResult_InputParams::set_allocated_i_device_type(::std::string* i_device_type) {
  if (i_device_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete i_device_type_;
  }
  if (i_device_type) {
    set_has_i_device_type();
    i_device_type_ = i_device_type;
  } else {
    clear_has_i_device_type();
    i_device_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.InputParams.i_device_type)
}

// optional string i_debug_info = 13;
inline bool QueryResult_InputParams::has_i_debug_info() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void QueryResult_InputParams::set_has_i_debug_info() {
  _has_bits_[0] |= 0x00001000u;
}
inline void QueryResult_InputParams::clear_has_i_debug_info() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void QueryResult_InputParams::clear_i_debug_info() {
  if (i_debug_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_debug_info_->clear();
  }
  clear_has_i_debug_info();
}
inline const ::std::string& QueryResult_InputParams::i_debug_info() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.InputParams.i_debug_info)
  return *i_debug_info_;
}
inline void QueryResult_InputParams::set_i_debug_info(const ::std::string& value) {
  set_has_i_debug_info();
  if (i_debug_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_debug_info_ = new ::std::string;
  }
  i_debug_info_->assign(value);
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.InputParams.i_debug_info)
}
inline void QueryResult_InputParams::set_i_debug_info(const char* value) {
  set_has_i_debug_info();
  if (i_debug_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_debug_info_ = new ::std::string;
  }
  i_debug_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbquery.QueryResult.InputParams.i_debug_info)
}
inline void QueryResult_InputParams::set_i_debug_info(const char* value, size_t size) {
  set_has_i_debug_info();
  if (i_debug_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_debug_info_ = new ::std::string;
  }
  i_debug_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbquery.QueryResult.InputParams.i_debug_info)
}
inline ::std::string* QueryResult_InputParams::mutable_i_debug_info() {
  set_has_i_debug_info();
  if (i_debug_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_debug_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.InputParams.i_debug_info)
  return i_debug_info_;
}
inline ::std::string* QueryResult_InputParams::release_i_debug_info() {
  clear_has_i_debug_info();
  if (i_debug_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = i_debug_info_;
    i_debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryResult_InputParams::set_allocated_i_debug_info(::std::string* i_debug_info) {
  if (i_debug_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete i_debug_info_;
  }
  if (i_debug_info) {
    set_has_i_debug_info();
    i_debug_info_ = i_debug_info;
  } else {
    clear_has_i_debug_info();
    i_debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.InputParams.i_debug_info)
}

// -------------------------------------------------------------------

// QueryResult_Int32Column

// optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
inline bool QueryResult_Int32Column::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_Int32Column::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_Int32Column::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_Int32Column::clear_header() {
  if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  clear_has_header();
}
inline const ::fbquery::QueryResult_ColumnHeaderInfo& QueryResult_Int32Column::header() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.Int32Column.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_Int32Column::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::fbquery::QueryResult_ColumnHeaderInfo;
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.Int32Column.header)
  return header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_Int32Column::release_header() {
  clear_has_header();
  ::fbquery::QueryResult_ColumnHeaderInfo* temp = header_;
  header_ = NULL;
  return temp;
}
inline void QueryResult_Int32Column::set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.Int32Column.header)
}

// repeated int32 values = 2 [packed = true];
inline int QueryResult_Int32Column::values_size() const {
  return values_.size();
}
inline void QueryResult_Int32Column::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::int32 QueryResult_Int32Column::values(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.Int32Column.values)
  return values_.Get(index);
}
inline void QueryResult_Int32Column::set_values(int index, ::google::protobuf::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.Int32Column.values)
}
inline void QueryResult_Int32Column::add_values(::google::protobuf::int32 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.Int32Column.values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryResult_Int32Column::values() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.Int32Column.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryResult_Int32Column::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.Int32Column.values)
  return &values_;
}

// -------------------------------------------------------------------

// QueryResult_Int64Column

// optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
inline bool QueryResult_Int64Column::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_Int64Column::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_Int64Column::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_Int64Column::clear_header() {
  if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  clear_has_header();
}
inline const ::fbquery::QueryResult_ColumnHeaderInfo& QueryResult_Int64Column::header() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.Int64Column.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_Int64Column::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::fbquery::QueryResult_ColumnHeaderInfo;
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.Int64Column.header)
  return header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_Int64Column::release_header() {
  clear_has_header();
  ::fbquery::QueryResult_ColumnHeaderInfo* temp = header_;
  header_ = NULL;
  return temp;
}
inline void QueryResult_Int64Column::set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.Int64Column.header)
}

// repeated int64 values = 2 [packed = true];
inline int QueryResult_Int64Column::values_size() const {
  return values_.size();
}
inline void QueryResult_Int64Column::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::int64 QueryResult_Int64Column::values(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.Int64Column.values)
  return values_.Get(index);
}
inline void QueryResult_Int64Column::set_values(int index, ::google::protobuf::int64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.Int64Column.values)
}
inline void QueryResult_Int64Column::add_values(::google::protobuf::int64 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.Int64Column.values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
QueryResult_Int64Column::values() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.Int64Column.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
QueryResult_Int64Column::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.Int64Column.values)
  return &values_;
}

// -------------------------------------------------------------------

// QueryResult_UInt32Column

// optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
inline bool QueryResult_UInt32Column::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_UInt32Column::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_UInt32Column::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_UInt32Column::clear_header() {
  if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  clear_has_header();
}
inline const ::fbquery::QueryResult_ColumnHeaderInfo& QueryResult_UInt32Column::header() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.UInt32Column.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_UInt32Column::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::fbquery::QueryResult_ColumnHeaderInfo;
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.UInt32Column.header)
  return header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_UInt32Column::release_header() {
  clear_has_header();
  ::fbquery::QueryResult_ColumnHeaderInfo* temp = header_;
  header_ = NULL;
  return temp;
}
inline void QueryResult_UInt32Column::set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.UInt32Column.header)
}

// repeated uint32 values = 2 [packed = true];
inline int QueryResult_UInt32Column::values_size() const {
  return values_.size();
}
inline void QueryResult_UInt32Column::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::uint32 QueryResult_UInt32Column::values(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.UInt32Column.values)
  return values_.Get(index);
}
inline void QueryResult_UInt32Column::set_values(int index, ::google::protobuf::uint32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.UInt32Column.values)
}
inline void QueryResult_UInt32Column::add_values(::google::protobuf::uint32 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.UInt32Column.values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QueryResult_UInt32Column::values() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.UInt32Column.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QueryResult_UInt32Column::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.UInt32Column.values)
  return &values_;
}

// -------------------------------------------------------------------

// QueryResult_UInt64Column

// optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
inline bool QueryResult_UInt64Column::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_UInt64Column::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_UInt64Column::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_UInt64Column::clear_header() {
  if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  clear_has_header();
}
inline const ::fbquery::QueryResult_ColumnHeaderInfo& QueryResult_UInt64Column::header() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.UInt64Column.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_UInt64Column::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::fbquery::QueryResult_ColumnHeaderInfo;
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.UInt64Column.header)
  return header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_UInt64Column::release_header() {
  clear_has_header();
  ::fbquery::QueryResult_ColumnHeaderInfo* temp = header_;
  header_ = NULL;
  return temp;
}
inline void QueryResult_UInt64Column::set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.UInt64Column.header)
}

// repeated uint64 values = 2 [packed = true];
inline int QueryResult_UInt64Column::values_size() const {
  return values_.size();
}
inline void QueryResult_UInt64Column::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::uint64 QueryResult_UInt64Column::values(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.UInt64Column.values)
  return values_.Get(index);
}
inline void QueryResult_UInt64Column::set_values(int index, ::google::protobuf::uint64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.UInt64Column.values)
}
inline void QueryResult_UInt64Column::add_values(::google::protobuf::uint64 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.UInt64Column.values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
QueryResult_UInt64Column::values() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.UInt64Column.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
QueryResult_UInt64Column::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.UInt64Column.values)
  return &values_;
}

// -------------------------------------------------------------------

// QueryResult_StringColumn

// optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
inline bool QueryResult_StringColumn::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_StringColumn::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_StringColumn::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_StringColumn::clear_header() {
  if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  clear_has_header();
}
inline const ::fbquery::QueryResult_ColumnHeaderInfo& QueryResult_StringColumn::header() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.StringColumn.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_StringColumn::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::fbquery::QueryResult_ColumnHeaderInfo;
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.StringColumn.header)
  return header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_StringColumn::release_header() {
  clear_has_header();
  ::fbquery::QueryResult_ColumnHeaderInfo* temp = header_;
  header_ = NULL;
  return temp;
}
inline void QueryResult_StringColumn::set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.StringColumn.header)
}

// repeated string values = 2;
inline int QueryResult_StringColumn::values_size() const {
  return values_.size();
}
inline void QueryResult_StringColumn::clear_values() {
  values_.Clear();
}
inline const ::std::string& QueryResult_StringColumn::values(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.StringColumn.values)
  return values_.Get(index);
}
inline ::std::string* QueryResult_StringColumn::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.StringColumn.values)
  return values_.Mutable(index);
}
inline void QueryResult_StringColumn::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.StringColumn.values)
  values_.Mutable(index)->assign(value);
}
inline void QueryResult_StringColumn::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fbquery.QueryResult.StringColumn.values)
}
inline void QueryResult_StringColumn::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbquery.QueryResult.StringColumn.values)
}
inline ::std::string* QueryResult_StringColumn::add_values() {
  return values_.Add();
}
inline void QueryResult_StringColumn::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.StringColumn.values)
}
inline void QueryResult_StringColumn::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fbquery.QueryResult.StringColumn.values)
}
inline void QueryResult_StringColumn::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fbquery.QueryResult.StringColumn.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryResult_StringColumn::values() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.StringColumn.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryResult_StringColumn::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.StringColumn.values)
  return &values_;
}

// -------------------------------------------------------------------

// QueryResult_BytesColumn

// optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
inline bool QueryResult_BytesColumn::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_BytesColumn::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_BytesColumn::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_BytesColumn::clear_header() {
  if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  clear_has_header();
}
inline const ::fbquery::QueryResult_ColumnHeaderInfo& QueryResult_BytesColumn::header() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.BytesColumn.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_BytesColumn::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::fbquery::QueryResult_ColumnHeaderInfo;
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.BytesColumn.header)
  return header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_BytesColumn::release_header() {
  clear_has_header();
  ::fbquery::QueryResult_ColumnHeaderInfo* temp = header_;
  header_ = NULL;
  return temp;
}
inline void QueryResult_BytesColumn::set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.BytesColumn.header)
}

// repeated bytes values = 2;
inline int QueryResult_BytesColumn::values_size() const {
  return values_.size();
}
inline void QueryResult_BytesColumn::clear_values() {
  values_.Clear();
}
inline const ::std::string& QueryResult_BytesColumn::values(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.BytesColumn.values)
  return values_.Get(index);
}
inline ::std::string* QueryResult_BytesColumn::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.BytesColumn.values)
  return values_.Mutable(index);
}
inline void QueryResult_BytesColumn::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.BytesColumn.values)
  values_.Mutable(index)->assign(value);
}
inline void QueryResult_BytesColumn::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fbquery.QueryResult.BytesColumn.values)
}
inline void QueryResult_BytesColumn::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbquery.QueryResult.BytesColumn.values)
}
inline ::std::string* QueryResult_BytesColumn::add_values() {
  return values_.Add();
}
inline void QueryResult_BytesColumn::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.BytesColumn.values)
}
inline void QueryResult_BytesColumn::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fbquery.QueryResult.BytesColumn.values)
}
inline void QueryResult_BytesColumn::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fbquery.QueryResult.BytesColumn.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryResult_BytesColumn::values() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.BytesColumn.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryResult_BytesColumn::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.BytesColumn.values)
  return &values_;
}

// -------------------------------------------------------------------

// QueryResult_FloatColumn

// optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
inline bool QueryResult_FloatColumn::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_FloatColumn::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_FloatColumn::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_FloatColumn::clear_header() {
  if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  clear_has_header();
}
inline const ::fbquery::QueryResult_ColumnHeaderInfo& QueryResult_FloatColumn::header() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.FloatColumn.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_FloatColumn::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::fbquery::QueryResult_ColumnHeaderInfo;
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.FloatColumn.header)
  return header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_FloatColumn::release_header() {
  clear_has_header();
  ::fbquery::QueryResult_ColumnHeaderInfo* temp = header_;
  header_ = NULL;
  return temp;
}
inline void QueryResult_FloatColumn::set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.FloatColumn.header)
}

// repeated float values = 2 [packed = true];
inline int QueryResult_FloatColumn::values_size() const {
  return values_.size();
}
inline void QueryResult_FloatColumn::clear_values() {
  values_.Clear();
}
inline float QueryResult_FloatColumn::values(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.FloatColumn.values)
  return values_.Get(index);
}
inline void QueryResult_FloatColumn::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.FloatColumn.values)
}
inline void QueryResult_FloatColumn::add_values(float value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.FloatColumn.values)
}
inline const ::google::protobuf::RepeatedField< float >&
QueryResult_FloatColumn::values() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.FloatColumn.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< float >*
QueryResult_FloatColumn::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.FloatColumn.values)
  return &values_;
}

// -------------------------------------------------------------------

// QueryResult_DoubleColumn

// optional .fbquery.QueryResult.ColumnHeaderInfo header = 1;
inline bool QueryResult_DoubleColumn::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_DoubleColumn::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_DoubleColumn::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_DoubleColumn::clear_header() {
  if (header_ != NULL) header_->::fbquery::QueryResult_ColumnHeaderInfo::Clear();
  clear_has_header();
}
inline const ::fbquery::QueryResult_ColumnHeaderInfo& QueryResult_DoubleColumn::header() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.DoubleColumn.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_DoubleColumn::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::fbquery::QueryResult_ColumnHeaderInfo;
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.DoubleColumn.header)
  return header_;
}
inline ::fbquery::QueryResult_ColumnHeaderInfo* QueryResult_DoubleColumn::release_header() {
  clear_has_header();
  ::fbquery::QueryResult_ColumnHeaderInfo* temp = header_;
  header_ = NULL;
  return temp;
}
inline void QueryResult_DoubleColumn::set_allocated_header(::fbquery::QueryResult_ColumnHeaderInfo* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.DoubleColumn.header)
}

// repeated double values = 2 [packed = true];
inline int QueryResult_DoubleColumn::values_size() const {
  return values_.size();
}
inline void QueryResult_DoubleColumn::clear_values() {
  values_.Clear();
}
inline double QueryResult_DoubleColumn::values(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.DoubleColumn.values)
  return values_.Get(index);
}
inline void QueryResult_DoubleColumn::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:fbquery.QueryResult.DoubleColumn.values)
}
inline void QueryResult_DoubleColumn::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.DoubleColumn.values)
}
inline const ::google::protobuf::RepeatedField< double >&
QueryResult_DoubleColumn::values() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.DoubleColumn.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
QueryResult_DoubleColumn::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.DoubleColumn.values)
  return &values_;
}

// -------------------------------------------------------------------

// QueryResult

// optional .fbquery.QueryResult.InputParams params = 1;
inline bool QueryResult::has_params() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult::set_has_params() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult::clear_has_params() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult::clear_params() {
  if (params_ != NULL) params_->::fbquery::QueryResult_InputParams::Clear();
  clear_has_params();
}
inline const ::fbquery::QueryResult_InputParams& QueryResult::params() const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.params)
  return params_ != NULL ? *params_ : *default_instance_->params_;
}
inline ::fbquery::QueryResult_InputParams* QueryResult::mutable_params() {
  set_has_params();
  if (params_ == NULL) params_ = new ::fbquery::QueryResult_InputParams;
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.params)
  return params_;
}
inline ::fbquery::QueryResult_InputParams* QueryResult::release_params() {
  clear_has_params();
  ::fbquery::QueryResult_InputParams* temp = params_;
  params_ = NULL;
  return temp;
}
inline void QueryResult::set_allocated_params(::fbquery::QueryResult_InputParams* params) {
  delete params_;
  params_ = params;
  if (params) {
    set_has_params();
  } else {
    clear_has_params();
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.QueryResult.params)
}

// repeated .fbquery.QueryResult.Int32Column int32Column = 2;
inline int QueryResult::int32column_size() const {
  return int32column_.size();
}
inline void QueryResult::clear_int32column() {
  int32column_.Clear();
}
inline const ::fbquery::QueryResult_Int32Column& QueryResult::int32column(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.int32Column)
  return int32column_.Get(index);
}
inline ::fbquery::QueryResult_Int32Column* QueryResult::mutable_int32column(int index) {
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.int32Column)
  return int32column_.Mutable(index);
}
inline ::fbquery::QueryResult_Int32Column* QueryResult::add_int32column() {
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.int32Column)
  return int32column_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_Int32Column >&
QueryResult::int32column() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.int32Column)
  return int32column_;
}
inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_Int32Column >*
QueryResult::mutable_int32column() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.int32Column)
  return &int32column_;
}

// repeated .fbquery.QueryResult.Int64Column int64Column = 3;
inline int QueryResult::int64column_size() const {
  return int64column_.size();
}
inline void QueryResult::clear_int64column() {
  int64column_.Clear();
}
inline const ::fbquery::QueryResult_Int64Column& QueryResult::int64column(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.int64Column)
  return int64column_.Get(index);
}
inline ::fbquery::QueryResult_Int64Column* QueryResult::mutable_int64column(int index) {
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.int64Column)
  return int64column_.Mutable(index);
}
inline ::fbquery::QueryResult_Int64Column* QueryResult::add_int64column() {
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.int64Column)
  return int64column_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_Int64Column >&
QueryResult::int64column() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.int64Column)
  return int64column_;
}
inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_Int64Column >*
QueryResult::mutable_int64column() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.int64Column)
  return &int64column_;
}

// repeated .fbquery.QueryResult.UInt32Column uint32Column = 4;
inline int QueryResult::uint32column_size() const {
  return uint32column_.size();
}
inline void QueryResult::clear_uint32column() {
  uint32column_.Clear();
}
inline const ::fbquery::QueryResult_UInt32Column& QueryResult::uint32column(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.uint32Column)
  return uint32column_.Get(index);
}
inline ::fbquery::QueryResult_UInt32Column* QueryResult::mutable_uint32column(int index) {
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.uint32Column)
  return uint32column_.Mutable(index);
}
inline ::fbquery::QueryResult_UInt32Column* QueryResult::add_uint32column() {
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.uint32Column)
  return uint32column_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_UInt32Column >&
QueryResult::uint32column() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.uint32Column)
  return uint32column_;
}
inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_UInt32Column >*
QueryResult::mutable_uint32column() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.uint32Column)
  return &uint32column_;
}

// repeated .fbquery.QueryResult.UInt64Column uint64Column = 5;
inline int QueryResult::uint64column_size() const {
  return uint64column_.size();
}
inline void QueryResult::clear_uint64column() {
  uint64column_.Clear();
}
inline const ::fbquery::QueryResult_UInt64Column& QueryResult::uint64column(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.uint64Column)
  return uint64column_.Get(index);
}
inline ::fbquery::QueryResult_UInt64Column* QueryResult::mutable_uint64column(int index) {
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.uint64Column)
  return uint64column_.Mutable(index);
}
inline ::fbquery::QueryResult_UInt64Column* QueryResult::add_uint64column() {
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.uint64Column)
  return uint64column_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_UInt64Column >&
QueryResult::uint64column() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.uint64Column)
  return uint64column_;
}
inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_UInt64Column >*
QueryResult::mutable_uint64column() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.uint64Column)
  return &uint64column_;
}

// repeated .fbquery.QueryResult.StringColumn stringColumn = 6;
inline int QueryResult::stringcolumn_size() const {
  return stringcolumn_.size();
}
inline void QueryResult::clear_stringcolumn() {
  stringcolumn_.Clear();
}
inline const ::fbquery::QueryResult_StringColumn& QueryResult::stringcolumn(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.stringColumn)
  return stringcolumn_.Get(index);
}
inline ::fbquery::QueryResult_StringColumn* QueryResult::mutable_stringcolumn(int index) {
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.stringColumn)
  return stringcolumn_.Mutable(index);
}
inline ::fbquery::QueryResult_StringColumn* QueryResult::add_stringcolumn() {
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.stringColumn)
  return stringcolumn_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_StringColumn >&
QueryResult::stringcolumn() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.stringColumn)
  return stringcolumn_;
}
inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_StringColumn >*
QueryResult::mutable_stringcolumn() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.stringColumn)
  return &stringcolumn_;
}

// repeated .fbquery.QueryResult.BytesColumn bytesColumn = 7;
inline int QueryResult::bytescolumn_size() const {
  return bytescolumn_.size();
}
inline void QueryResult::clear_bytescolumn() {
  bytescolumn_.Clear();
}
inline const ::fbquery::QueryResult_BytesColumn& QueryResult::bytescolumn(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.bytesColumn)
  return bytescolumn_.Get(index);
}
inline ::fbquery::QueryResult_BytesColumn* QueryResult::mutable_bytescolumn(int index) {
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.bytesColumn)
  return bytescolumn_.Mutable(index);
}
inline ::fbquery::QueryResult_BytesColumn* QueryResult::add_bytescolumn() {
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.bytesColumn)
  return bytescolumn_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_BytesColumn >&
QueryResult::bytescolumn() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.bytesColumn)
  return bytescolumn_;
}
inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_BytesColumn >*
QueryResult::mutable_bytescolumn() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.bytesColumn)
  return &bytescolumn_;
}

// repeated .fbquery.QueryResult.FloatColumn floatColumn = 8;
inline int QueryResult::floatcolumn_size() const {
  return floatcolumn_.size();
}
inline void QueryResult::clear_floatcolumn() {
  floatcolumn_.Clear();
}
inline const ::fbquery::QueryResult_FloatColumn& QueryResult::floatcolumn(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.floatColumn)
  return floatcolumn_.Get(index);
}
inline ::fbquery::QueryResult_FloatColumn* QueryResult::mutable_floatcolumn(int index) {
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.floatColumn)
  return floatcolumn_.Mutable(index);
}
inline ::fbquery::QueryResult_FloatColumn* QueryResult::add_floatcolumn() {
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.floatColumn)
  return floatcolumn_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_FloatColumn >&
QueryResult::floatcolumn() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.floatColumn)
  return floatcolumn_;
}
inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_FloatColumn >*
QueryResult::mutable_floatcolumn() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.floatColumn)
  return &floatcolumn_;
}

// repeated .fbquery.QueryResult.DoubleColumn doubleColumn = 9;
inline int QueryResult::doublecolumn_size() const {
  return doublecolumn_.size();
}
inline void QueryResult::clear_doublecolumn() {
  doublecolumn_.Clear();
}
inline const ::fbquery::QueryResult_DoubleColumn& QueryResult::doublecolumn(int index) const {
  // @@protoc_insertion_point(field_get:fbquery.QueryResult.doubleColumn)
  return doublecolumn_.Get(index);
}
inline ::fbquery::QueryResult_DoubleColumn* QueryResult::mutable_doublecolumn(int index) {
  // @@protoc_insertion_point(field_mutable:fbquery.QueryResult.doubleColumn)
  return doublecolumn_.Mutable(index);
}
inline ::fbquery::QueryResult_DoubleColumn* QueryResult::add_doublecolumn() {
  // @@protoc_insertion_point(field_add:fbquery.QueryResult.doubleColumn)
  return doublecolumn_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_DoubleColumn >&
QueryResult::doublecolumn() const {
  // @@protoc_insertion_point(field_list:fbquery.QueryResult.doubleColumn)
  return doublecolumn_;
}
inline ::google::protobuf::RepeatedPtrField< ::fbquery::QueryResult_DoubleColumn >*
QueryResult::mutable_doublecolumn() {
  // @@protoc_insertion_point(field_mutable_list:fbquery.QueryResult.doubleColumn)
  return &doublecolumn_;
}

// -------------------------------------------------------------------

// FinalResponse

// required string Target = 1;
inline bool FinalResponse::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FinalResponse::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FinalResponse::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FinalResponse::clear_target() {
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_->clear();
  }
  clear_has_target();
}
inline const ::std::string& FinalResponse::target() const {
  // @@protoc_insertion_point(field_get:fbquery.FinalResponse.Target)
  return *target_;
}
inline void FinalResponse::set_target(const ::std::string& value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(value);
  // @@protoc_insertion_point(field_set:fbquery.FinalResponse.Target)
}
inline void FinalResponse::set_target(const char* value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbquery.FinalResponse.Target)
}
inline void FinalResponse::set_target(const char* value, size_t size) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbquery.FinalResponse.Target)
}
inline ::std::string* FinalResponse::mutable_target() {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbquery.FinalResponse.Target)
  return target_;
}
inline ::std::string* FinalResponse::release_target() {
  clear_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = target_;
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FinalResponse::set_allocated_target(::std::string* target) {
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_;
  }
  if (target) {
    set_has_target();
    target_ = target;
  } else {
    clear_has_target();
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.FinalResponse.Target)
}

// required string RequestID = 2;
inline bool FinalResponse::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FinalResponse::set_has_requestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FinalResponse::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FinalResponse::clear_requestid() {
  if (requestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestid_->clear();
  }
  clear_has_requestid();
}
inline const ::std::string& FinalResponse::requestid() const {
  // @@protoc_insertion_point(field_get:fbquery.FinalResponse.RequestID)
  return *requestid_;
}
inline void FinalResponse::set_requestid(const ::std::string& value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
  // @@protoc_insertion_point(field_set:fbquery.FinalResponse.RequestID)
}
inline void FinalResponse::set_requestid(const char* value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbquery.FinalResponse.RequestID)
}
inline void FinalResponse::set_requestid(const char* value, size_t size) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbquery.FinalResponse.RequestID)
}
inline ::std::string* FinalResponse::mutable_requestid() {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbquery.FinalResponse.RequestID)
  return requestid_;
}
inline ::std::string* FinalResponse::release_requestid() {
  clear_has_requestid();
  if (requestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = requestid_;
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FinalResponse::set_allocated_requestid(::std::string* requestid) {
  if (requestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requestid_;
  }
  if (requestid) {
    set_has_requestid();
    requestid_ = requestid;
  } else {
    clear_has_requestid();
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.FinalResponse.RequestID)
}

// optional .fbquery.QueryResult Result = 3;
inline bool FinalResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FinalResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FinalResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FinalResponse::clear_result() {
  if (result_ != NULL) result_->::fbquery::QueryResult::Clear();
  clear_has_result();
}
inline const ::fbquery::QueryResult& FinalResponse::result() const {
  // @@protoc_insertion_point(field_get:fbquery.FinalResponse.Result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::fbquery::QueryResult* FinalResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::fbquery::QueryResult;
  // @@protoc_insertion_point(field_mutable:fbquery.FinalResponse.Result)
  return result_;
}
inline ::fbquery::QueryResult* FinalResponse::release_result() {
  clear_has_result();
  ::fbquery::QueryResult* temp = result_;
  result_ = NULL;
  return temp;
}
inline void FinalResponse::set_allocated_result(::fbquery::QueryResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.FinalResponse.Result)
}

// optional string Error = 4;
inline bool FinalResponse::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FinalResponse::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FinalResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FinalResponse::clear_error() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& FinalResponse::error() const {
  // @@protoc_insertion_point(field_get:fbquery.FinalResponse.Error)
  return *error_;
}
inline void FinalResponse::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set:fbquery.FinalResponse.Error)
}
inline void FinalResponse::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbquery.FinalResponse.Error)
}
inline void FinalResponse::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbquery.FinalResponse.Error)
}
inline ::std::string* FinalResponse::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbquery.FinalResponse.Error)
  return error_;
}
inline ::std::string* FinalResponse::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FinalResponse::set_allocated_error(::std::string* error) {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (error) {
    set_has_error();
    error_ = error;
  } else {
    clear_has_error();
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.FinalResponse.Error)
}

// optional string RequestKey = 5;
inline bool FinalResponse::has_requestkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FinalResponse::set_has_requestkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FinalResponse::clear_has_requestkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FinalResponse::clear_requestkey() {
  if (requestkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestkey_->clear();
  }
  clear_has_requestkey();
}
inline const ::std::string& FinalResponse::requestkey() const {
  // @@protoc_insertion_point(field_get:fbquery.FinalResponse.RequestKey)
  return *requestkey_;
}
inline void FinalResponse::set_requestkey(const ::std::string& value) {
  set_has_requestkey();
  if (requestkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestkey_ = new ::std::string;
  }
  requestkey_->assign(value);
  // @@protoc_insertion_point(field_set:fbquery.FinalResponse.RequestKey)
}
inline void FinalResponse::set_requestkey(const char* value) {
  set_has_requestkey();
  if (requestkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestkey_ = new ::std::string;
  }
  requestkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbquery.FinalResponse.RequestKey)
}
inline void FinalResponse::set_requestkey(const char* value, size_t size) {
  set_has_requestkey();
  if (requestkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestkey_ = new ::std::string;
  }
  requestkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbquery.FinalResponse.RequestKey)
}
inline ::std::string* FinalResponse::mutable_requestkey() {
  set_has_requestkey();
  if (requestkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requestkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbquery.FinalResponse.RequestKey)
  return requestkey_;
}
inline ::std::string* FinalResponse::release_requestkey() {
  clear_has_requestkey();
  if (requestkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = requestkey_;
    requestkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FinalResponse::set_allocated_requestkey(::std::string* requestkey) {
  if (requestkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requestkey_;
  }
  if (requestkey) {
    set_has_requestkey();
    requestkey_ = requestkey;
  } else {
    clear_has_requestkey();
    requestkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbquery.FinalResponse.RequestKey)
}

// optional bool FromCache = 6;
inline bool FinalResponse::has_fromcache() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FinalResponse::set_has_fromcache() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FinalResponse::clear_has_fromcache() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FinalResponse::clear_fromcache() {
  fromcache_ = false;
  clear_has_fromcache();
}
inline bool FinalResponse::fromcache() const {
  // @@protoc_insertion_point(field_get:fbquery.FinalResponse.FromCache)
  return fromcache_;
}
inline void FinalResponse::set_fromcache(bool value) {
  set_has_fromcache();
  fromcache_ = value;
  // @@protoc_insertion_point(field_set:fbquery.FinalResponse.FromCache)
}

// optional int32 NumResp = 7;
inline bool FinalResponse::has_numresp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FinalResponse::set_has_numresp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FinalResponse::clear_has_numresp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FinalResponse::clear_numresp() {
  numresp_ = 0;
  clear_has_numresp();
}
inline ::google::protobuf::int32 FinalResponse::numresp() const {
  // @@protoc_insertion_point(field_get:fbquery.FinalResponse.NumResp)
  return numresp_;
}
inline void FinalResponse::set_numresp(::google::protobuf::int32 value) {
  set_has_numresp();
  numresp_ = value;
  // @@protoc_insertion_point(field_set:fbquery.FinalResponse.NumResp)
}

// optional int32 ThisResp = 8;
inline bool FinalResponse::has_thisresp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FinalResponse::set_has_thisresp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FinalResponse::clear_has_thisresp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FinalResponse::clear_thisresp() {
  thisresp_ = 0;
  clear_has_thisresp();
}
inline ::google::protobuf::int32 FinalResponse::thisresp() const {
  // @@protoc_insertion_point(field_get:fbquery.FinalResponse.ThisResp)
  return thisresp_;
}
inline void FinalResponse::set_thisresp(::google::protobuf::int32 value) {
  set_has_thisresp();
  thisresp_ = value;
  // @@protoc_insertion_point(field_set:fbquery.FinalResponse.ThisResp)
}

// optional bool MissingMDS = 9;
inline bool FinalResponse::has_missingmds() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FinalResponse::set_has_missingmds() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FinalResponse::clear_has_missingmds() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FinalResponse::clear_missingmds() {
  missingmds_ = false;
  clear_has_missingmds();
}
inline bool FinalResponse::missingmds() const {
  // @@protoc_insertion_point(field_get:fbquery.FinalResponse.MissingMDS)
  return missingmds_;
}
inline void FinalResponse::set_missingmds(bool value) {
  set_has_missingmds();
  missingmds_ = value;
  // @@protoc_insertion_point(field_set:fbquery.FinalResponse.MissingMDS)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fbquery

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fbresult_2eproto__INCLUDED
